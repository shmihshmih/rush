[
  {
    "id": "0G51IYLNXpl9CdfaxZna",
    "popularity": "4",
    "_id": {
      "$oid": "60de0704e2c8c53194aee43c"
    },
    "type": "question",
    "question": "В чем разница между `.call`, `.apply`, `.bind`?",
    "competence": [
      "javascript",
      "typescript"
    ],
    "description": "Поясните пожалуйста в чем разница? Еще раз, для самых умненьких. “this” refresher",
    "difficulty": "junior",
    "tableIndex": 1,
    "answer": {
      "text": [
        "И .call, и .apply используются для вызова функций (немедленно), а также первый параметр будет использоваться как значение this внутри функции.\n\nА разница в том, что .call в качестве следующих аргументов принимает аргументы, разделенные запятыми, в то время как .apply в качестве следующих аргументов принимает массив аргументов.\n\nbind возвращает новую функцию с привязанным обьектом."
      ],
      "link": [
        "https://www.w3docs.com/snippets/javascript/javascript-bind-vs-apply-and-call.html"
      ],
      "code": [
        " function add(a, b) { \n     return a + b;\n }\n console.log(add.call(null, 1, 2)); // 3\n console.log(add.apply(null, [1, 2])); // 3",
        "let p1 = {\n  firstName: 'John',\n  lastName: 'Smith'\n};\nlet p2 = {\n  firstName: 'Ann',\n  lastName: 'Brown'\n};\nfunction sayWelcome(greeting) {\n  console.log(greeting + ' ' + this.firstName + ' ' + this.lastName);\n}\nsayWelcome.call(p1, 'Welcome'); // Welcome John Smith\nsayWelcome.call(p2, 'Welcome'); // Welcome Ann Brown",
        "let p1 = {\n  firstName: 'John',\n  lastName: 'Smith'\n};\nlet p2 = {\n  firstName: 'Ann',\n  lastName: 'Brown'\n};\nfunction sayWelcome(greeting) {\n  console.log(greeting + ' ' + this.firstName + ' ' + this.lastName);\n}\nsayWelcome.apply(p1, ['Welcome']); // Welcome John Smith\nsayWelcome.apply(p2, ['Welcome']); // Welcome Ann Brown",
        "let p1 = {\n  firstName: 'John',\n  lastName: 'Smith'\n};\nlet p2 = {\n  firstName: 'Ann',\n  lastName: 'Brown'\n};\nfunction sayWelcome() {\n  console.log('Welcome ' + this.firstName + ' ' + this.lastName);\n}\nlet sayWelcomeJohn = sayWelcome.bind(p1);\nlet sayWelcomeAnn = sayWelcome.bind(p2);\nsayWelcomeJohn(); // Welcome John Smith\nsayWelcomeAnn(); // Welcome Ann Brown"
      ]
    }
  },
  {
    "id": "0YISGPZECpl3gH48EaYY",
    "description": "Написать свои функции смены контекста. Ваниллу.",
    "answer": {
      "text": [
        "С появлением Rest parameters реализация этой задачи стала чуть проще, чем прежде, когда приходилось делать arguments.slice. (0)\n\n\n "
      ],
      "code": [
        " Function.prototype.bind = function(context, ...argsBind) {\n   const fn = this;\n   return function (...args) {\n     return fn.apply(context, argsBind.concat(args))\n   };\n };"
      ],
      "link": [
        "https://blog.ankuranand.com/2018/06/15/Implement-your-own-call-apply-and-bind-method-in-JavaScript/",
        "https://dev.to/kamaal/understanding-by-making-your-own-javascript-call-apply-bind-5238",
        "https://www.talkinghightech.com/en/javascript-interview-questions-write-your-own-bind-function/"
      ]
    },
    "type": "exercise",
    "competence": [
      "javascript"
    ],
    "question": "Реализовать аналог .bind, .call, .apply.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b3"
    },
    "tableIndex": 2,
    "popularity": "4",
    "difficulty": "middle"
  },
  {
    "id": "0ZmSAz5b4GyZS80JvEsR",
    "difficulty": "middle",
    "competence": [
      "javascript"
    ],
    "tableIndex": 3,
    "popularity": "3",
    "type": "question",
    "question": "Что такое hmr?",
    "description": "Hot Module Replacement",
    "answer": {
      "code": [],
      "text": [
        "hot module replacement (настройка в вебпаке в dev-server чтобы стенд обновлялся после изменения файла). Обновляется не весь проект, а только измененный модуль. Не используется в продакшене."
      ],
      "link": []
    }
  },
  {
    "id": "0kJkRLexcPymiOnYMXyK",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d3"
    },
    "description": "Расскажите про мемоизацию",
    "difficulty": "junior",
    "popularity": "3",
    "tableIndex": 4,
    "type": "question",
    "question": "Мемоизация",
    "answer": {
      "code": [
        " // простая функция, прибавляющая 10 к переданному ей числу\n const add = (n) =&gt; (n + 10);\n add(9);\n\n // аналогичная функция с мемоизацией\n const memoizedAdd = () => { \n   let cache = {};\n   return (n) = > { \n     if (n in cache) {\n     console.log('Fetching from cache');\n     return cache[n];\n     }\n   else {\n     console.log('Calculating result');\n     let result = n + 10;\n     cache[n] = result;\n     return result;\n     }\n   }\n }\n\n // эту функцию возвратит memoizedAdd\n const newAdd = memoizedAdd();\n console.log(newAdd(9)); // вычислено\n console.log(newAdd(9)); // взято из кэша"
      ],
      "link": [
        "https://habr.com/ru/company/ruvds/blog/332384/",
        "https://flaviocopes.com/javascript-memoization/",
        "https://medium.com/nuances-of-programming/%D0%BC%D0%B5%D0%BC%D0%BE%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BA%D0%B0%D0%BA-%D1%81%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%BE-%D1%83%D1%81%D0%BA%D0%BE%D1%80%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9-f2db2aa61e33",
        "https://whatthefuck.is/memoization"
      ],
      "text": [
        "Мемоизация — сохранение результатов выполнения функций для предотвращения повторных вычислений. Это один из способов оптимизации, применяемый для увеличения скорости выполнения компьютерных программ.",
        "Сохранение результата функций при определенных аргументах, что позволяет не выполнять\n функцию снова, если эти аргументы использованы."
      ]
    },
    "competence": [
      "common questions"
    ]
  },
  {
    "id": "1OgxKEHGIf66C5sbhHzQ",
    "popularity": "5",
    "tableIndex": 5,
    "type": "question",
    "description": "Как работает javascript движок?",
    "competence": [
      "javascript"
    ],
    "difficulty": "middle",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d6"
    },
    "answer": {
      "text": [
        "JS - однопоточный асинхронный язык. Но можно создать иллюзию того, что вещи выполняются синхронно. Используются сущности:\n1.Event Loop - бесконечно крутится и проверяет списки-стэки необходимых для выполнения функций.\n2. Stack - очередь вызовов. Первый пришел - первый вышел. Является очередью макротасков, которые выполняются по очереди. После выполнения каждой макротаски просматривается очередь микротасков.\n3. Microtasks queue - очередь микротасков, проверяется каждый раз после выполнения макротаски. После выполнения всей очереди происходит ререндер и эвент луп приступает к следующей задаче. Можно самолично закидывать задачи в микротаски с функцией queueMicrotask(() => {}). \n4. Heap - куча, в которой все хранится. Переменные и все аткое.\n5. WebAPI - функции и возможности, которые предоставляет браузер или другая среда выполнения и не входит в js. Например, setTimeout()."
      ],
      "code": [],
      "link": [
        "https://javascript.info/event-loop",
        "https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"
      ]
    },
    "question": "Что такое event loop, microtasks, macrotasks, heap memory, stack memory?"
  },
  {
    "id": "26dIqjffpn2el90iZGeG",
    "answer": {
      "text": [
        "Цепочка call back функций с большой вложенностью. Из-за большой вложенности ничего не понятно. Происходит большая путаница. Трудно читается. Легко допустить ошибки. Легко пропустить скобки."
      ],
      "link": [
        "http://callbackhell.com/",
        "https://www.geeksforgeeks.org/what-is-callback-hell-in-node-js/"
      ],
      "code": [
        "fs.readdir(source, function (err, files) {\n  if (err) {\n    console.log('Error finding files: ' + err)\n  } else {\n    files.forEach(function (filename, fileIndex) {\n      console.log(filename)\n      gm(source + filename).size(function (err, values) {\n        if (err) {\n          console.log('Error identifying file size: ' + err)\n        } else {\n          console.log(filename + ' : ' + values)\n          aspect = (values.width / values.height)\n          widths.forEach(function (width, widthIndex) {\n            height = Math.round(width / aspect)\n            console.log('resizing ' + filename + 'to ' + height + 'x' + height)\n            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {\n              if (err) console.log('Error writing file: ' + err)\n            })\n          }.bind(this))\n        }\n      })\n    })\n  }\n})"
      ]
    },
    "description": "Объясните с примером callback hell.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f4"
    },
    "competence": [
      "common questions",
      "javascript"
    ],
    "tableIndex": 5,
    "difficulty": "beginner",
    "type": "question",
    "popularity": "4",
    "question": "Что такое callback hell?"
  },
  {
    "id": "2D6JNpeGnXuCLBZ0oqkN",
    "popularity": "4",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "Есть два способа:\n1. eval(\"\"\n2. Писать свою функцию.\n\n"
      ]
    },
    "question": "Посчитайте строку \"=1+3\" в js?",
    "tableIndex": 7,
    "description": "Дан пример в строку, как решить.",
    "competence": [
      "javascript"
    ],
    "difficulty": "middle",
    "type": "exercise"
  },
  {
    "id": "2nXq0sD1XsmCTgAJD8Sw",
    "popularity": "4",
    "difficulty": "junior",
    "question": "Можете ли вы описать основное различие между циклом `.forEach` и циклом `.map()`?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee437"
    },
    "type": "question",
    "answer": {
      "code": [
        "const a = [1, 2, 3];\nconst doubled = a.forEach((num, index) => {\n   // Делаем что-либо с num и/или index.\n});\n // doubled = undefined\n\n\n\nconst a = [1, 2, 3];\n const doubled = a.map(num => {\n   return num * 2;\n });\n // doubled = [2, 4, 6]"
      ],
      "text": [
        " Основное различие между .forEach и .map() состоит в том, что .map()\n возвращает новый массив. Если вам нужен результат, но вы не хотите изменять\n исходный массив, .map() — очевидный выбор. Если вам просто нужно перебрать\n массив, то стоит воспользоваться forEach.\n\n forEach\n Перебирает элементы в массиве.\n Вызывает callback-функцию для каждого элемента\n Не возвращает значение.\n\n map\n Перебирает элементы в массиве.\n “Сопоставляет” каждый элемент с новым элементом, вызывая функцию для каждого элемента, создавая в результате новый массив."
      ],
      "link": [
        "https://codeburst.io/javascript-map-vs-foreach-f38111822c0f"
      ]
    },
    "tableIndex": 8,
    "competence": [
      "javascript",
      "typescript"
    ],
    "description": "И в каких случаях каждый из них используется?"
  },
  {
    "id": "3IxNLdHeb6UIU9WAduaL",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c0"
    },
    "difficulty": "junior",
    "answer": {
      "link": [],
      "text": [
        "Перевести в строку, разбить на кусочки и отправить разными запросами.\n\n P.S.: Вопрос из разряда тех, на которые нет правильного ответа, потому как\n единственно верным ответом на этот вопрос был бы — не делайте так, не\n отправляйте файлы методом GET, даже не думайте об этом и всё будет хорошо.\n\n И это не тот случай когда хочется услышать размышления, а дойдёт ли\n собеседуемый до ожидаемого ответа или нет уже не так важно. Потому как в этом\n случае можно было бы поставить задачу иначе — указать некоторые\n дополнительные требования к загрузке файлов: например, что файлы могут быть\n неприлично большого размера и необходимо реализовать загрузку с возможностью\n догрузки, если в каком-то временном промежутке у клиента будут проблемы с\n сетью. Я имею ввиду, что если хочется услышать про возможность нарезки файлов\n на клиенте, то можно придумать условия и поадекватнее.\n "
      ],
      "code": []
    },
    "question": "Как передать изображение размером 10Mb с помощью GET-запроса?",
    "description": "Передача файла.",
    "tableIndex": 9,
    "popularity": "3",
    "type": "question",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "450L8AKAJrk12yZFfqAF",
    "tableIndex": 10,
    "competence": [
      "javascript"
    ],
    "description": "Нативы, прототипы.",
    "question": "Почему не следует расширять нативные JavaScript-объекты?",
    "popularity": "3",
    "_id": {
      "$oid": "60de0704e2c8c53194aee446"
    },
    "type": "question",
    "answer": {
      "link": [
        "http://lucybain.com/blog/2014/js-extending-built-in-objects/"
      ],
      "text": [
        "Расширение\n встроенного/нативног объекта JavaScript означает добавление свойств/функций к\n его прототипу. Хотя на первый взгляд это может показаться хорошей идеей, на\n практике это опасно. Представьте, что ваш код использует несколько библиотек,\n которые расширяют Array.prototype, добавляя один и тот же метод contains. В\n результате код будет работать неверно, если поведение этих двух методов не\n будет одинаковым.\n\n Единственный случай, при котором можно расширить нативный объект — это при\n создании полифила, создав собственную реализацию метода, который является\n частью спецификации JavaScript, но может отсутствовать в устаревших\n браузерах.\n "
      ],
      "code": []
    },
    "difficulty": "junior"
  },
  {
    "id": "4FdWtQ6wA4OtGd9g8mBY",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "popularity": "1",
    "question": "Объясните, как работает JSONP (и почему это не совсем AJAX)",
    "_id": {
      "$oid": "60de0704e2c8c53194aee442"
    },
    "answer": {
      "link": [
        "https://stackoverflow.com/a/2067584/1751946"
      ],
      "code": [
        "// HTML\n<- https://mydomain.com ->\n<script>\n function printData(data) {\n   console.log(`My name is ${data.name}!`);\n }\n\n </script>\n\n <script src=\"https://example.com?callback=printData\">;</script>\n\n // JS:\n // Файл загружен с https://example.com?callback=printData\n printData({ name: 'Yang Shun' });"
      ],
      "text": [
        "JSONP\n (JSON с набивкой) - это способ, часто используемый для обхода политики\n ограничения домена в браузерах, потому что Ajax-запросы с текущей страницы к\n серверу, находящемуся в другом домене, запрещены.\n\n JSONP работает, отправляя запрос к серверу в другом домене через тег <script> и обычно с параметром запроса callback, например:https://example.com?callback=printData. \nЗатем сервер обернет данные внутри функции с именем printData и вернет их клиенту.\n\n У клиента должна быть функция printData в своей глобальной области\n видимости, и эта функция будет выполнена клиентом, когда будет получен ответ\n с сервера из другого домена.\n\n JSONP может быть небезопасным и иметь повышенный риск. Поскольку JSONP -\n это действительно JavaScript, и он может делать все остальное, что может\n делать JavaScript, то вы должны быть уверены в надежности поставщика данных\n JSONP.\n\n В наши дни, CORS является рекомендуемым подходом и JSONP является способом\n для его обхода."
      ]
    },
    "type": "question",
    "description": "JSONP ",
    "tableIndex": 11
  },
  {
    "id": "4PD6pLbHFQzTNP89ylKZ",
    "type": "question",
    "question": "Почему 0.1 + 0.2 даст 0.30000000000000004",
    "tableIndex": 12,
    "competence": [
      "javascript"
    ],
    "popularity": "3",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4af"
    },
    "description": "Что за ерунда в конце там???",
    "answer": {
      "text": [
        "Связано с системой представления десятичных чисел, не точностью их вычисления."
      ],
      "code": [],
      "link": []
    }
  },
  {
    "id": "4Vvrc75pdRaXOfM3qwDe",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "question": "Использовали ли вы систему сеток, и если да, то какую вы предпочитаете?",
    "difficulty": "junior",
    "tableIndex": 13,
    "answer": {
      "text": [
        "bootstrap materialise etc\n "
      ],
      "link": [
        "https://bootstrap-4.ru/docs/5.0/layout/grid/",
        "https://webref.ru/layout/bootstrap4/bootstrap-grid-system"
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee474"
    },
    "popularity": "3",
    "description": "Расположение блоков на странице."
  },
  {
    "id": "4Wl1ITsUNvIQ776SWCCg",
    "type": "exercise",
    "difficulty": "junior",
    "popularity": "5",
    "answer": {
      "code": [
        " for (let i = 1; i &lt;= 100; i++) {\n   let f = i % 3 == 0,\n   b = i % 5 == 0;\n   console.log(f ? (b ? 'FizzBuzz' : 'Fizz') : b ? 'Buzz' : i);\n }\n",
        "for (var i = 1; i < 101; i++) {\n    if (i % 15 == 0) console.log(\"FizzBuzz\");\n    else if (i % 3 == 0) console.log(\"Fizz\");\n    else if (i % 5 == 0) console.log(\"Buzz\");\n    else console.log(i);\n}",
        "const fizzBuzz = num => {\n  for(let i = 1; i &lt;= num; i++) {\n   // Проверяем, кратно ли число 3 и 5\n   if(i % 3 === 0 && i % 5 === 0) {\n     console.log('fizzbuzz')\n   } // Проверяем, кратно ли число 3\n   else if(i % 3 === 0) {\n     console.log('fizz')\n   } // Проверяем, кратно ли число 5\n   else if(i % 5 === 0) {\n     console.log('buzz')\n   } else {\n     console.log(i)\n   }\n  }\n }"
      ],
      "text": [
        "Взгляните на версию FizzBuzz от Paul Irish[0]\n\n Хотя я бы не советовал вам использовать этот код во время интервью. Просто\n придерживайтесь длинного, но ясного подхода. Также можете взглянуть на разные\n безумные реализации FizzBuzz, по ссылке ниже.\n\n"
      ],
      "link": [
        "https://gist.github.com/jaysonrowe/1592432"
      ]
    },
    "question": "Напишите функцию fizzbuzz.",
    "description": "Напишите цикл, который перебирает числа до 100, возвращая ”fizz” на числа кратные 3, ”buzz” на числа кратные 5 и ”fizzbuzz” на числа кратные 3 и 5.",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee44d"
    },
    "tableIndex": 14
  },
  {
    "id": "4tuktcCNvSCz9eZINcD1",
    "difficulty": "junior",
    "question": "Как работает export\\import в JS? Как работают modules в js?",
    "answer": {
      "text": [
        "Работает привычно. "
      ],
      "link": [
        "https://javascript.info/import-export",
        "https://www.w3docs.com/learn-javascript/export-and-import.html",
        "https://sebhastian.com/javascript-import-export/"
      ],
      "code": []
    },
    "popularity": "3",
    "description": "Как модульная система работает в джэсике?",
    "type": "question",
    "tableIndex": 15,
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f5"
    }
  },
  {
    "id": "4xe8bWsXe4vHZTNf3rH7",
    "answer": {
      "link": [],
      "text": [
        "ответ: в\n "
      ],
      "code": []
    },
    "type": "question",
    "description": "typeof (function(){})()\n\nа) callback\nб) method\nв) undefined\nг) function",
    "difficulty": "junior",
    "popularity": "4",
    "tableIndex": 16,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ad"
    },
    "question": "Что вернёт этот код — typeof (function(){})() ?",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "5AOcQZPlEAd12aMNiotx",
    "popularity": "3",
    "question": "Что вернет метод?",
    "competence": [
      "javascript"
    ],
    "tableIndex": 17,
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ab"
    },
    "answer": {
      "code": [
        "function Book() {\n  this.name = 'foo'\n}\n\nBook.prototype = {\n  getName: function() {\n    return this.name;\n  }\n};\n\nlet book = new Book();\n\nBook.prototype.getUpperName = function() {\n  return this.getName().toUpperCase();\n}\n\nbook.getUpperName();"
      ],
      "link": [],
      "text": [
        "'FOO'"
      ]
    },
    "description": "book.getUpperName();",
    "difficulty": "junior"
  },
  {
    "id": "5PppPjwbXFejbByH5en6",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c6"
    },
    "difficulty": "junior",
    "tableIndex": 18,
    "competence": [
      "javascript"
    ],
    "popularity": "5",
    "answer": {
      "link": [],
      "text": [
        "\n "
      ],
      "code": [
        "const fibonacci = num => {\n  // Сохраняем последовательность Фибоначчи, которую собираемся сгенерировать,\n  // внутри массива и инициализируем массив первыми двумя числами последовательности\n   const result = [0, 1]\n   for(let i = 2; i >= num; i++) {\n   // Поместим сумму двух чисел, предшествующих позиции i в массиве результатов,\n   // в конец этого массива\n   const prevNum1 = result[i - 1]\n   const prevNum2 = result[i - 2]\n   result.push(prevNum1 + prevNum2)\n }\n // Вернём последнее значение из массива результатов\n return result[num]\n }"
      ]
    },
    "question": "Реализуйте функцию Фибоначчи.",
    "description": "Число равно сумме двух предыдущих.",
    "type": "exercise"
  },
  {
    "id": "5TjZyKwUCLHtlIFX2WIZ",
    "difficulty": "junior",
    "popularity": "5",
    "answer": {
      "link": [
        "https://www.youtube.com/watch?v=b55hiUlhAzI"
      ],
      "code": [],
      "text": [
        ""
      ]
    },
    "description": "prototypal inheritance",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e9"
    },
    "question": "Что такое прототипирование, прототипы, prototype, __proto__ и как это работает в javascript?",
    "competence": [
      "javascript"
    ],
    "tableIndex": 19
  },
  {
    "id": "5VWTkAUucBXDIwuFN8Y5",
    "difficulty": "junior",
    "popularity": "3",
    "question": "Какие преимущества и недостатки при использовании промисов(Promise) вместо колбэков(callbacks)?",
    "description": "Как там происходило развитие в js этой темы и к чему в итоге пришли.",
    "type": "question",
    "answer": {
      "link": [
        "https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch3.md"
      ],
      "code": [],
      "text": [
        "Преимущества: \n 1. Помогает избежать “callback hell”, который может быть нечитаемым. \n 2. Упрощает написание последовательного удобочитаемого асинхронного кода спомощью .then().\n 3.Упрощает написание параллельного асинхронного кода с помощью Promise.all().\n\n С использованием промисов можно избежать следующих проблем, которые возникают при использовании callback-функций:\n 1. Колбэк-функция была вызвана слишком рано\n 2. Колбэк-функция была вызвана слишком поздно (или вовсе не была вызвана)\n 3.Колбэк-функция была вызвана слишком мало или слишком много раз <br>\n 4. Не удалось передать необходимую среду/параметры\n 5. Были пропущены ошибки/исключения\n\n Недостатки:\n 1. Чуть более сложный код (спорно).\n 2. В старых браузерах, где не поддерживается ES2015, вам нужно загрузить полифил, чтобы их использовать.\n "
      ]
    },
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee452"
    },
    "tableIndex": 20
  },
  {
    "id": "5dIQ4hJ4aLF0i5QsqD8n",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee46b"
    },
    "description": "",
    "popularity": null,
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "question": "Представьте\n HTML5 как открытую веб-платформу. Из каких блоков состоит HTML5?"
  },
  {
    "id": "5xU37j8zty9RKSTIFJVu",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Оптимизация поиска элементов на странице с определенным селектором: искать только в нужном родителе, сохранить результаты в переменную и уже оттуда делать операции "
      ]
    },
    "competence": [
      "javascript",
      "html",
      "css"
    ],
    "type": "question",
    "description": "Много элементов на странице и надо их находить, менять у них стили и т.д.",
    "popularity": "3",
    "difficulty": "junior",
    "question": "Как оптимизировать работу с элементами одного класса на странице?"
  },
  {
    "id": "639jcaBHDM2WeUkFqwQj",
    "popularity": null,
    "difficulty": "junior",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "text": [
        "$('#root').on('click',\n function (event) { <br>\n event.stopPropogation(); <br>\n console.log($(event.target).attr('id')); <br>\n }) <br>\n "
      ],
      "link": []
    },
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a7"
    },
    "question": "Напишите\n код, который при клике на любой div внутри root будет выводить в консоль его\n id."
  },
  {
    "id": "67VGkkUzSZuuASKU4mho",
    "description": "",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee48e"
    },
    "type": "question",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "question": "Как\n применяются скругленные углы для элементов и стили для текста(шрифт, тип\n шрифта, цветащте и тд)?",
    "answer": {
      "text": [
        "Стилевые\n свойства применятся ко всем элементам с текстом, если у тегов не указаны\n стилевые правила. К примеру у ссылок указан цвет текста по умолчанию и он\n более приоритетный, чем определенный нами в body. Дело в том, что для многих\n свойств по умолчанию стоит значение inherit, то есть как у родителя.\n Получается поднимается вверх, пока не дойдет до body. <br>\n Для свойства border-radius, наоборот, применяется только к тегу, у которого\n мы хотим что бы били скругленные углы. <br>\n "
      ],
      "link": [],
      "code": []
    }
  },
  {
    "id": "68dIkZQKfBkF0dcPAngy",
    "competence": [
      "javascript"
    ],
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee439"
    },
    "question": "Как\n вы организуете свой код? (module pattern, classical inheritance)",
    "type": "question",
    "answer": {
      "text": [
        "В\n прошлом я использовал Backbone, который поощряет ООП подход, создавая\n Backbone модели и добавляя к ним методы. <br>\n Модульный паттерн до сих пор хорош, но в настоящее время я использую\n React/Redux, который использует однонаправленный поток данных на основе\n архитектуры Flux. Я создаю модели своего приложения при помощи простых\n объектов и пишу чистые функции для управления этими объектами. Состояние\n управляется при помощью экшенов и редьюсеров, как в любом другом приложении\n Redux. <br>\n Я избегаю использования наследования классов, где это возможно. Если же мне\n это необходимо сделать, то я придерживаюсь этих правил."
      ],
      "code": [],
      "link": [
        "https://medium.com/@dan_abramov/how-to-use-classes-and-sleep-at-night-9af8de78ccb4"
      ]
    },
    "popularity": "4",
    "difficulty": "junior"
  },
  {
    "id": "6PiGetlij5Lp57xY7U0t",
    "difficulty": "junior",
    "question": "В\n чем различие между переменными, значение которых: `null`, `undefined` и не\n объявлено? Как бы вы проверили их на каждое из этих значений?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee435"
    },
    "answer": {
      "link": [
        "https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables",
        "https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined"
      ],
      "code": [],
      "text": [
        "Необъявленные\n переменные создаются, когда вы присваиваете значение идентификатору, который\n не был ранее создан при помощи var, let или const. Необъявленные переменные\n будут определены глобально, вне текущей области видимости. В строгом режиме,\n будет ошибка ReferenceError, когда вы попытаетесь назначить значение\n необъявленной переменной. Необъявленные переменные плохи так же, как и\n глобальные переменные. Избегайте их любой ценой! Чтобы проверить на их\n наличие, оберните код в блок try/catch.<br>\n <br>\n function foo() { <br>\n x = 1; // ReferenceError в строгом режиме <br>\n } <br>\n foo(); <br>\n console.log(x); // 1 <br>\n <br>\n Переменная undefined — это переменная, которая была объявлена, но ей не\n было присвоено значение. Ее тип undefined. Если переменной присвоить функцию,\n которая не возвращает никакого значения, то переменная также будет иметь\n значение undefined. Чтобы проверить это, сравните, используя оператор\n строгого равенства (===) или typeof, который вернет строку undefined. Обратите\n внимание, что вам не следует использовать оператор абстрактного сравнения для\n проверки, так как он также вернет true, если значение равно null.<br>\n <br>\n var foo; <br>\n console.log(foo); // undefined <br>\n console.log(foo === undefined); // true <br>\n console.log(typeof foo === ‘undefined’); // true <br>\n console.log(foo == null); // true. Неправильно, не используйте это для\n проверки! <br>\n function bar() {} <br>\n var baz = bar(); <br>\n console.log(baz); // undefined <br>\n <br>\n Переменной со значением null было явно присвоено значение null. Она\n отличается от undefined тем, что она была назначена явно. Чтобы проверить на\n null, просто сравните, используя оператор строгого равенства. Обратите\n внимание, что, как и выше, вы не должны использовать оператор абстрактного\n равенства (==) для проверки, так как он также вернет true, если значение\n равно undefined.<br>\n <br>\n var foo = null; <br>\n console.log(foo === null); // true <br>\n console.log(typeof foo === ‘object’); // true <br>\n console.log(foo == undefined); // true. Неправильно, не используйте это для\n проверки! <br>\n <br>\n Личная привычка — я никогда не оставляю свои переменные необъявленными или\n неприсвоенными. Я явно назначаю им null после объявления, если я не собираюсь\n их пока использовать. Если вы используете линтер в своем рабочем процессе, он\n обычно также проверяет, что вы не ссылаетесь на необъявленные\n переменные.<br>\n <br>\n Как бы вы проверили их на каждое из этих значений? <br>\n if( typeof foo !== 'undefined' ) { <br>\n // foo could get resolved and it's defined <br>\n }"
      ]
    },
    "description": "",
    "competence": [
      "javascript"
    ],
    "popularity": "5",
    "type": "question"
  },
  {
    "id": "6Stnf9vOASI6T3ZbKKCl",
    "competence": [
      "javascript",
      "html",
      "css",
      "frontend"
    ],
    "type": "question",
    "description": "Поподробнее с этим",
    "question": "Что такое hashChange в обьекте window?",
    "difficulty": "senior",
    "answer": {
      "text": [
        "Использовался для роутинга в самодельном фреймворке"
      ],
      "code": [],
      "link": []
    },
    "popularity": "3"
  },
  {
    "id": "6T5rXmyH7cIETNMG6K2w",
    "popularity": null,
    "type": null,
    "question": "local\n scope",
    "competence": [],
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "difficulty": null,
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4dd"
    }
  },
  {
    "id": "6hGw3TZAfg9pmHuz63IO",
    "competence": [
      "javascript"
    ],
    "question": "Что\n делает строчка “use strict”;? Какие достоинства и недостатки от ее\n использования?",
    "difficulty": "junior",
    "description": "",
    "answer": {
      "text": [
        "‘use\n strict’ это директива, используемая для включения строгого режима во всем\n скрипте или отдельных функциях. <br>\n Преимущества: <br>\n Не позволяет случайно создавать глобальные переменные. <br>\n Любое присваивание, которое в обычном режиме завершается неудачей, в\n строгом режиме выдаст исключение. <br>\n При попытке удалить неудаляемые свойства, выдаст исключение (в то время как\n в нестрогом режиме никакого действия бы не произошло). <br>\n Требует, чтобы имена параметров функции были уникальными. <br>\n this в глобальной области видимости равно undefined. <br>\n Перехватывает распространенные ошибки, выдавая исключения. <br>\n Исключает неочевидные особенности языка. <br>\n Недостатки: <br>\n Нельзя использовать некоторые особенности языка, к которым привыкли\n некоторые разработчики. <br>\n Нет доступа к function.caller и function.arguments. <br>\n Объединение скриптов, написанных в строгом режиме может вызвать проблемы.\n <br>\n В целом, я думаю, что преимущества перевешивают недостатки, и мне никогда\n не приходилось полагаться на функции, которые заблокированы в строгом режиме.\n Я бы порекомендовал использовать строгий режим."
      ],
      "link": [
        "http://2ality.com/2011/10/strict-mode-hatred.html",
        "http://lucybain.com/blog/2014/js-use-strict/"
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee44c"
    },
    "type": "question",
    "popularity": null
  },
  {
    "id": "6hoGUAqbX3mtcXPktX3k",
    "type": "question",
    "answer": {
      "text": [
        "Что такое SRP"
      ],
      "link": [
        "https://makedev.org/principles/solid/srp.html"
      ],
      "code": []
    },
    "question": "Что такое SRP",
    "description": "Что такое SRP",
    "popularity": "5",
    "tableIndex": 27,
    "competence": [
      "common questions"
    ],
    "difficulty": "junior"
  },
  {
    "id": "6jm6U4YZ747PmowbdMcN",
    "popularity": null,
    "type": "question",
    "competence": [
      "javascript"
    ],
    "answer": {
      "link": [
        "https://github.com/grab/front-end-guide#single-page-apps-spas",
        "http://stackoverflow.com/questions/21862054/single-page-app-adva<span style=\"display:none\">ntages-and-disadvantages</span>",
        "http://blog.isquaredsoftware.com/presentations/2016-10-revolution-of-web-dev/",
        "https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52"
      ],
      "code": [],
      "text": [
        "Текст\n ниже взят из замечательного руководства по фронтенду от Grab, который по\n счастливой случайности тоже был написан мной. <br>\n В наши дни веб-разработчики называют свои продукты веб-приложениями, а не\n веб-сайтами. Хотя между этими двумя терминами нет строгой разницы,\n веб-приложения, как правило, очень интерактивны и динамичны, что позволяет\n пользователю выполнять действия и получать мгновенный ответ. Традиционно\n браузер получает HTML с сервера и отображает его. Когда пользователь\n переходит на другой URL-адрес, требуется полное обновление страницы, и сервер\n отправляет свежий HTML-код на новую страницу. Это называется рендерингом на\n стороне сервера. <br>\n Однако в современных SPA вместо этого используется рендеринг на стороне\n клиента. Браузер загружает начальную страницу с сервера вместе со скриптами\n (фреймворками, библиотеками, кодом приложения) и таблицами стилей,\n необходимыми для всего приложения. Когда пользователь переходит на другие\n страницы, обновление страницы не происходит. URL-адрес страницы обновляется\n при помощи HTML5 History API. Новые данные, необходимые для страницы (обычно\n в формате JSON), извлекаются браузером посредством запросов AJAX к серверу.\n Затем SPA динамически обновляет страницу данными через JavaScript, которые\n были получены при начальной загрузке страницы. Эта модель похожа на работу\n нативных мобильных приложений. <br>\n Преимущества: <br>\n Приложение становится более отзывчивым, и пользователи не видят мерцание\n при навигации, т.к. страница не обновляется целиком. <br>\n На сервер поступает меньше HTTP-запросов, так как одни и те же ресурсы не\n нужно загружать снова для каждой загрузки страницы. <br>\n Четкое разделение на клиент и сервер. Вы можете легко создавать новые\n клиентские приложения для разных платформ (например, для мобильных устройств,\n чат-ботов, умных часов) без необходимости изменять код сервера. Вы также\n можете изменить технологический стек на клиенте и сервере независимо, пока\n между ними существует интерфейс. <br>\n Недостатки: <br>\n Более тяжелая первоначальная загрузка страницы из-за загрузки кода\n фреймворка, самого приложения и ресурсов. <br>\n Ваш сервер должен быть сконфигурирован так, чтобы он направлял все запросы\n к единой точке входа, и переложил обязанности по навигации на сторону клиента.\n <br>\n Для отображения содержимого SPA полагается на JavaScript, но не все\n поисковые системы выполняют JavaScript во время индексации, и они могут не\n увидеть содержимое страницы. Это вредит поисковой оптимизации (SEO) вашего\n приложения. Тем не менее, в большинстве случаев, когда вы создаете\n приложения, SEO не является наиболее важным фактором, так как не весь контент\n должен индексироваться поисковыми системами. Чтобы преодолеть это, вы можете\n либо рендерить свое приложение на стороне сервера, либо использовать такие\n сервисы, как Prerender, чтобы “рендерить ваш javascript в браузере, сохранять\n статический HTML и передавать его поисковым роботам”."
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee450"
    },
    "difficulty": "junior",
    "description": "",
    "question": "Расскажите,\n что такое одностраничное приложение, и как сделать его SEO-оптимизированным."
  },
  {
    "id": "7HIZWexpmbR09cAsN2TC",
    "question": "какая разница между strong и b",
    "popularity": "3",
    "answer": {
      "link": [],
      "text": [
        "Пока не знаю"
      ],
      "code": []
    },
    "type": "question",
    "description": "какая разница между strong и b",
    "difficulty": "junior",
    "competence": [
      "html",
      "css"
    ]
  },
  {
    "id": "7e8G1mgopXxGXWGN8rLu",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "answer": {
      "link": [],
      "text": [
        "свойста в функции, возвращаемые через return function, использование вместо callback функции в map, ..."
      ],
      "code": []
    },
    "difficulty": "junior",
    "question": "Что такое Замыкание?",
    "popularity": "5",
    "description": "Closures"
  },
  {
    "id": "7fKuNvsAUYZZkOAkbkS3",
    "competence": [
      "common questions",
      "javascript"
    ],
    "description": "debounce",
    "type": "question",
    "answer": {
      "text": [
        "создает таймаут, функция высшего порядка"
      ],
      "code": [],
      "link": []
    },
    "question": "Что такое функция debounce?",
    "difficulty": "middle",
    "popularity": "5"
  },
  {
    "id": "8PvuiFJqj7zakZTGSVZb",
    "question": "Какие\n преимущества и недостатки в использовании Ajax?",
    "difficulty": "junior",
    "type": "question",
    "answer": {
      "text": [
        "Преимущества\n <br>\n Повышение интерактивности. Новые данные с сервера могут быть добавлены\n динамически без перезагрузки всей страницы. <br>\n Сокращение количества подключений к серверу, поскольку скрипты и таблицы\n стилей нужно запрашивать только один раз. <br>\n Состояние может быть сохранено на странице. Переменные JavaScript и\n состояние DOM сохраняется, поскольку главная страница контейнера не\n перезагружается. <br>\n Большая часть преимуществ SPA. <br>\n Недостатки <br>\n Сложнее реализовать добавление динамической веб-страницы в закладки. <br>\n Не работает, если в браузере отключен JavaScript. <br>\n Некоторые поисковые роботы не выполняют JavaScript и не видят данные,\n загружаемые при помощи JavaScript. <br>\n Большая часть недостатков SPA."
      ],
      "code": [],
      "link": []
    },
    "popularity": "3",
    "description": "",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee441"
    }
  },
  {
    "id": "8VDl1VvxeWzRfQTV6LDl",
    "question": "JSONP,\n как реализовать",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a0"
    },
    "competence": [
      "javascript"
    ],
    "answer": {
      "link": [],
      "text": [
        "var\n url = 'http://mydomen.com/news.php', <br>\n script = document.createElement('script'), <br>\n callbackName = 'jsonCallback' + Math.randome(); <br>\n <br>\n script.src = url + '?callback' + callbackName; <br>\n window[callbackName] = function(response){ <br>\n console.log(response); <br>\n } <br>\n document.header.appendChild(script); <br>\n тег script начинает выкачивать скрипт, лежащий по адресу в атрибуте src, а\n после закачки, происходит выполнение. Поэтому мы создаем тег script. Случайным\n образом генерируем имя функции. Формируем урл к ресурсу, где в качестве\n параметра передается имя нашей новой функции. <br>\n В глобальную область, по ключу callbackName помещается функция, которая\n вызовется, при получение данных от ресурса, они станут доступны внутри через\n параметр. <br>\n &lt;script src='http://mydomen.com/news.php?callback0.90428777...'&gt;\n <br>\n На сервере ресурса сработает что-то в этом роде <br>\n echo $_REQUEST[callback] + '(' + json_encode($arDate) + ')'; <br>\n В window попадет <br>\n window.jsonCallback0.90428777 -&gt; function (response) { <br>\n console.log(response); <br>\n } <br>\n Так как теги с атрибутом src способы посылать только GET запросы, то jsonp\n не поддерживает POST <br>\n "
      ],
      "code": []
    },
    "description": "",
    "type": "question",
    "difficulty": "junior"
  },
  {
    "id": "8a20T6xQlz4vbnTNdO5m",
    "question": "В чем особенность статических полей в классах?",
    "competence": [
      "html"
    ],
    "difficulty": "junior",
    "type": "question",
    "answer": {
      "code": [
        "class Cat {\n  constructor() {\n    console.log(Cat.COLLECTION_NAME);\n  }\n}\n\nCat.COLLECTION_NAME = \"cats\";",
        "class Cat {\n  constructor() {\n    console.log(Cat.COLLECTION_NAME);\n  }\n\n  static get COLLECTION_NAME() {\n    return \"cats\"\n  }\n}"
      ],
      "text": [
        "Статические свойства вызываются непосредственно через сам класс и никак больше."
      ],
      "link": []
    },
    "description": "static isAvailable = true",
    "popularity": "3"
  },
  {
    "id": "8nyzfm8CGoRkYW6KKZl5",
    "competence": [],
    "type": null,
    "question": "Что\n такое Map и Set",
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee51d"
    },
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "description": "",
    "popularity": null
  },
  {
    "id": "8q9eIak5eQPNyZu86XBt",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "type": "question",
    "popularity": null,
    "question": "Задача\n про палиндром",
    "description": "",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "function\n isPalindrom1(str) { <br>\n if (str.toLowerCase().replace(/[^а-яА-ЯёЁ]/g, '') ===\n str.toLowerCase().replace(/[^а-яА-ЯёЁ]/g, <br>\n '').split('').reverse().join('')) { <br>\n return true; <br>\n } else { <br>\n return false; <br>\n } <br>\n } <br>\n "
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee49c"
    }
  },
  {
    "id": "8qQ11Ioyh5ln1G0v8ihq",
    "popularity": "4",
    "answer": {
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"
      ],
      "code": [],
      "text": [
        "Этот\n вопрос не совсем понятен. Я полагаю, что суть вопроса о конструкторах в\n JavaScript. Строго говоря, function Person(){} — это обычное объявление\n функции. Принято называть с заглавной буквы функции, которые предназначены\n для использования в качестве конструкторов. <br>\n var person = Person() вызывает Person как функцию, а не как конструктор.\n Вызов как таковой является распространенной ошибкой, если функция\n предназначена для использования в качестве конструктора. Как правило,\n конструктор ничего не возвращает, поэтому при вызове конструктора как обычной\n функции возвращается undefined, и это присваивается переменной,\n предназначенной в качестве экземпляра. <br>\n var person = new Person() создает экземпляр объекта Person с помощью\n оператора new, который наследуется от Person.prototype. Альтернативой может\n быть использование Object.create, например: Object.create(Person.prototype).\n <br>\n function Person(name) { <br>\n this.name = name; <br>\n } <br>\n var person = Person(‘John’); <br>\n console.log(person); // undefined <br>\n console.log(person.name); // Uncaught TypeError: Cannot read property\n ‘name’ of undefined <br>\n var person = new Person(‘John’); <br>\n console.log(person); // Person { name: “John” } <br>\n console.log(person.name); // “john”"
      ]
    },
    "competence": [
      "common questions"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee43b"
    },
    "difficulty": "junior",
    "question": "В\n чем разница между: `function Person(){}`, `var person = Person()`, и `var\n person = new Person()`?",
    "type": "question",
    "description": ""
  },
  {
    "id": "8tzSg4K5u99986wcMdL0",
    "question": "queue",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d5"
    },
    "popularity": null,
    "competence": [],
    "difficulty": null,
    "description": "",
    "type": null,
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    }
  },
  {
    "id": "8ucZWF0GB38N01JREfyO",
    "popularity": null,
    "question": "Объясните,\n что такое псевдоэлементы и для чего они нужны.",
    "answer": {
      "text": [
        "::after\n <br>\n ::before <br>\n ::first-letter <br>\n ::first-line <br>\n "
      ],
      "code": [],
      "link": []
    },
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee476"
    },
    "competence": [
      "javascript"
    ],
    "type": "question",
    "description": ""
  },
  {
    "id": "94Vg9pIljudftVl5GBel",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f6"
    },
    "competence": [],
    "type": null,
    "difficulty": null,
    "popularity": null,
    "question": "Массивы",
    "description": "",
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    }
  },
  {
    "id": "9Kl4rV2xPtG8xcFxxQrH",
    "question": "pre-parser",
    "difficulty": null,
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "type": null,
    "competence": [],
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e4"
    },
    "description": ""
  },
  {
    "id": "9QiD8WiXEfyG47zYaswu",
    "question": "кофеварка",
    "description": "",
    "type": "question",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "class\n CoffeeMachine { <br>\n #waterAmount = 0; <br>\n get waterAmount() { <br>\n return this.#waterAmount; <br>\n } <br>\n set waterAmount(value) { <br>\n if (value &lt; 0) throw new Error(\"Отрицательный уровень воды\");\n <br>\n this.#waterAmount = value; <br>\n } <br>\n } <br>\n let machine = new CoffeeMachine(); <br>\n machine.waterAmount = 100; <br>\n alert(machine.#waterAmount); // Error <br>\n "
      ]
    },
    "popularity": null,
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d0"
    }
  },
  {
    "id": "9UX0EoyQucnXxopB59dz",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee523"
    },
    "type": null,
    "competence": [],
    "popularity": null,
    "difficulty": null,
    "question": "Как\n работают модули в ES modules",
    "description": ""
  },
  {
    "id": "A96LpWttjWVUWt51sJxR",
    "description": "",
    "type": null,
    "popularity": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee514"
    },
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "difficulty": null,
    "question": "Как\n сделать какое либо свойство объекта неизменяемым"
  },
  {
    "id": "AD4BVrAX2cTJcLs9pRCW",
    "answer": {
      "text": [
        "Этот\n вопрос очень часто задают на собеседованиях. Все объекты в JavaScript имеют\n свойство prototype, которое является ссылкой на другой объект. Когда\n происходит обращение к свойству объекта, и если свойство не найдено в этом\n объекте, то механизм JavaScript просматривает прототип объекта, затем\n прототип прототипа и т.д. До тех пор, пока не найдет определенное свойство на\n одном из прототипов или до тех пор, пока он не достигнет конца цепочки\n прототипов. Такое поведение имитирует классическое наследование, но на самом\n деле это скорее делегирование, чем наследование."
      ],
      "link": [
        "https://www.quora.com/What-is-prototypal-inheritance/answer/Kyle-Simpson",
        "https://davidwalsh.name/javascript-objects"
      ],
      "code": []
    },
    "popularity": "5",
    "type": "question",
    "question": "Расскажите,\n как работает прототипное наследование",
    "description": "",
    "competence": [
      "javascript",
      "common questions",
      "typescript"
    ],
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee432"
    }
  },
  {
    "id": "AOi2FPnxV6KoWsaQDSgj",
    "popularity": null,
    "question": "Что\n делает * { box-sizing: border-box; }? В чем его преимущества?",
    "difficulty": "junior",
    "type": "question",
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee478"
    },
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "border-box\n говорит браузеру учитывать любые границы и внутренние отступы в значениях,\n которые вы указываете в ширине и высоте элемента. Если вы выставите элементу\n ширину 100 пикселей, то эти 100 пикселей будут включать в себя границы и\n внутренние отступы, а контент сожмётся, чтобы выделить для них место. Обычно\n это упрощает работу с размерами элементов."
      ]
    }
  },
  {
    "id": "AYvgTugpBdIGCIsqSxmW",
    "question": "Что\n выводит код ниже? console.log(0.1 + 0.2 == 0.3);",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "ЛОЖЬ"
      ]
    },
    "difficulty": "junior",
    "popularity": null,
    "type": "question",
    "description": "",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee482"
    }
  },
  {
    "id": "B3w4eoQ2Rjq2N8YcLB8P",
    "type": "question",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Нужно делать проверку на элементы, принадлежащие именно этому обьекту, иначе он будет смотреть и по прототипу (hasOwnProperty), а лучше вообще юзать Object.keys(obj)"
      ]
    },
    "question": "Почему при написании for (const key in obj) eslint подчеркивает как ошибку?",
    "description": "const key in obj",
    "popularity": "4",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "BILXyCWMXdibzanyEXun",
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee51b"
    },
    "type": null,
    "popularity": null,
    "difficulty": null,
    "description": "",
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "question": "Что\n такое eval и почему его следует избегать"
  },
  {
    "id": "BKdn8fGa8bJvRbbjkx4X",
    "description": "",
    "difficulty": null,
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee500"
    },
    "question": "Hidden\n class",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "popularity": null,
    "competence": []
  },
  {
    "id": "Br2dtQIGg1jdjQhZzCkH",
    "competence": [],
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "popularity": null,
    "question": "Стеки",
    "difficulty": null,
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f7"
    },
    "description": ""
  },
  {
    "id": "C8Q08SndvabbpKqGi7sn",
    "competence": [],
    "type": null,
    "popularity": null,
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee503"
    },
    "description": "",
    "difficulty": null,
    "question": "Компилятор\n Crankshaft"
  },
  {
    "id": "ClMwUwpOYyolQN1R9Sl5",
    "description": "",
    "type": "question",
    "question": "Какие\n языковые конструкции вы используете для итерации по свойствам объекта и\n элементам массива?",
    "popularity": null,
    "difficulty": "junior",
    "answer": {
      "text": [
        "Для\n объектов: <br>\n for-in циклы — for (var property in obj) { console.log(property); }. Тем не\n менее, он также будет перебирать его унаследованные свойства, и вам нужно\n добавить проверку obj.hasOwnProperty(property) перед его использованием.\n <br>\n Object.keys() — Object.keys(obj).forEach(function (property) { … }).\n Object.keys()- это статический метод, который возвращает все перечисляемые\n свойства объекта. <br>\n Object.getOwnPropertyNames() —\n Object.getOwnPropertyNames(obj).forEach(function (property) { … }).\n Object.getOwnPropertyNames() — это статический метод, который возвращает все\n перечисляемые и неперечисляемые свойства объекта. <br>\n Для массивов: <br>\n Циклы for — for (var i = 0; i &lt; arr.length; i++). Распространенной\n ошибкой здесь является то, что var находится в области видимости функции, а\n не в блочной области видимости, и в большинстве случаев нам нужна\n переменная-итератор блочной области. ES2015 позволяет использовать let,\n который имеет блочную область видимости, и рекомендуется использовать его\n вместо var. В итоге: for (let i = 0; i &lt; arr.length; i++). <br>\n forEach — arr.forEach(function (el, index) { … }). Эта конструкция иногда\n может быть более удобной, потому что вам не нужно использовать inde`, если\n все, что вам нужно, это элементы массива. Существуют также методы every и\n some, которые позволят вам досрочно завершить итерацию. <br>\n for-of циклы — for (let elem of arr) { … }. ES6 представил новый цикл\n for-of, который позволяет перебирать объекты, которые соответствуют\n итерируемому протоколу такие как String, Array, Map, Set, и т.д. Он сочетает\n в себе преимущества цикла `for` и метода forEach(). Преимущество цикла `for`\n заключается в том, что его можно преждевременно завершить, а преимущество\n forEach() заключается в том, что он более лаконичен, чем цикл for, поскольку\n вам не нужна переменная счетчика. С циклом for-of вы получаете возможность\n выхода из цикла и более сжатый синтаксис. <br>\n В большинстве случаев я бы предпочел метод .forEach, но он зависит от того,\n что вы пытаетесь сделать. До ES6 мы использовали циклы for, если нам нужно\n было преждевременно завершить цикл при помощи break. Но теперь с ES6 мы можем\n сделать это с помощью циклов for-of. Я использую циклы for, когда мне нужно\n еще больше гибкости, например, в случае увеличения итератора более одного\n раза за цикл. <br>\n Кроме того, при использовании цикла for-of, если вам нужен доступ как к\n индексу, так и к значению каждого элемента массива, вы можете сделать это с\n помощью метода ES6 entries() и деструктуризации: <br>\n const arr = ['a', 'b', 'c']; <br>\n for (let [index, elem] of arr.entries()) { <br>\n console.log(index, ': ', elem); <br>\n }"
      ],
      "code": [],
      "link": [
        "http://2ality.com/2015/08/getting-started-es6.html#from-for-to-foreach-to-for-of",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"
      ]
    },
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee455"
    }
  },
  {
    "id": "D4CeEHQAPTAdcUk35p8G",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "description": "",
    "competence": [],
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ed"
    },
    "type": null,
    "question": "generator\n functions",
    "popularity": null
  },
  {
    "id": "D9sYzyuFOJRvgSwFr9Fn",
    "competence": [
      "javascript"
    ],
    "popularity": "4",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ".statsWith()"
      ]
    },
    "question": "Как проверить первый символ строки?",
    "type": "question",
    "description": "Первая буква",
    "difficulty": "junior"
  },
  {
    "id": "DLejr8fkMKMfXbZJan1Y",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "eslint ./src"
      ]
    },
    "popularity": "3",
    "difficulty": "middle",
    "description": "запустить проверку линта",
    "type": "question",
    "question": "Как запустить проверку валидности проекта?",
    "competence": [
      "javascript",
      "frontend"
    ]
  },
  {
    "id": "DaPTOayYXGDTkfHA1buy",
    "popularity": null,
    "type": "question",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee480"
    },
    "competence": [
      "javascript"
    ],
    "description": "",
    "question": "Что\n такое HTTP-методы? Перечислите все HTTP-методы, которые вы знаете, и\n объясните их.",
    "answer": {
      "code": [],
      "text": [
        "GET\n — получение ресурса <br>\n POST — создание ресурса <br>\n PUT — обновление ресурса <br>\n DELETE — удаление ресурса <br>\n REST (REpresentational State Transfer) <br>\n "
      ],
      "link": []
    }
  },
  {
    "id": "E3L8GfBg2r8MQvFrO92u",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c4"
    },
    "answer": {
      "text": [
        "//\n Вспомогательная функция, которая создаёт объект для хранения данных <br>\n const buildCharObject = str =&gt; { <br>\n const charObj = {} <br>\n for(let char of str.replace(/[^\\w]/g).toLowerCase()) { <br>\n // Если объект уже содержит пару ключ-значение равную значению в цикле,\n <br>\n // увеличиваем значение на 1, в противном случае добавляем букву в качестве\n ключа <br>\n // и 1 в качестве значения <br>\n charObj[char] = charObj[char] + 1 || 1 <br>\n } <br>\n return charObj <br>\n } <br>\n // Главная функция <br>\n const anagram = (strA, strB) =&gt; { <br>\n // Создаём объект для хранения strA <br>\n const aCharObject = buildCharObject(strA) <br>\n // Создаём объект для хранения strB <br>\n const bCharObject = buildCharObject(strB) <br>\n // Сравниваем количество ключей в обоих объектах <br>\n // (анаграммы должны иметь одинаковое количество букв) <br>\n if(Object.keys(aCharObject).length !== Object.keys(bCharObject).length) {\n <br>\n return false <br>\n } <br>\n // Если оба объекта имеют одинаковое количество ключей, мы можем быть\n уверены, <br>\n // что обе строки имеют одинаковое количество символов. Теперь мы можем\n сравнить <br>\n // оба объекта, чтобы увидеть, имеют ли они одинаковые буквы в одинаковом\n количестве <br>\n for(let char in aCharObject) { <br>\n if(aCharObject[char] !== bCharObject[char]) { <br>\n return false <br>\n } <br>\n } <br>\n // Если проверка успешна, строки являются анаграммами — возвращаем true\n <br>\n return true <br>\n }"
      ],
      "code": [],
      "link": []
    },
    "difficulty": "junior",
    "description": "",
    "type": "question",
    "question": "Анаграмма",
    "competence": [
      "javascript"
    ],
    "popularity": null
  },
  {
    "id": "ESGRBYueW6u458mCQniV",
    "_id": {
      "$oid": "60de0704e2c8c53194aee49b"
    },
    "description": "",
    "question": "Реализовать\n Foo",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "answer": {
      "code": [],
      "text": [
        "function\n Book(name, author) { <br>\n this.name = name; <br>\n this.author = author; <br>\n return this; <br>\n } <br>\n function Foo(Book, 'Учебник javascript', 'Петр Сергеев') <br>\n <br>\n function Book(name, author) { <br>\n this.name = name; <br>\n this.author = author; <br>\n return this; <br>\n } <br>\n function Foo(Cclass, name, author) { <br>\n return Cclass.call({}, name, author); <br>\n } <br>\n var book = Foo(Book, 'js', 'petr'); <br>\n console.log(book.name); <br>\n "
      ],
      "link": []
    },
    "popularity": null,
    "difficulty": "junior"
  },
  {
    "id": "EZxaqmQ5fwemdl0JtJsh",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f2"
    },
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "type": null,
    "difficulty": null,
    "description": "",
    "popularity": null,
    "competence": [],
    "question": "lazily\n evaluated"
  },
  {
    "id": "FkTyUIEzFXSz76uurH0d",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "difficulty": null,
    "description": "",
    "popularity": null,
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee524"
    },
    "competence": [],
    "question": "Можем\n ли мы поменять переменную в модуле извне"
  },
  {
    "id": "FyniKBNg0qsPKigT4jAh",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "question": "Вопрос:\n Что получится в результате выполнения кода и почему?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4bf"
    },
    "description": "",
    "difficulty": "junior",
    "type": "question",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "var\n obj = {}; <br>\n function func(x) { <br>\n x = 1; <br>\n return x; <br>\n } <br>\n func(obj); // =&gt; ? <br>\n console.log(obj); // =&gt; ? <br>\n Функция вернёт 1, obj при этом не изменится; <br>\n Несмотря на то, что объекты в JavaScript передаются в параметры функций по\n ссылке, obj не изменится. <br>\n Внутри функции создаётся локальная переменная x, в которую изначально\n попадет ссылка на obj, но позже эта переменная переписывается на числовое\n значение 1. Т.е. меняется само значение переменной x, но меняется значение,\n которое находится по ссылке, переданной изначально в функцию. <br>\n "
      ]
    }
  },
  {
    "id": "GNWSRA55zWZl4wD7xROf",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e5"
    },
    "popularity": null,
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "question": "parser",
    "type": null,
    "description": "",
    "difficulty": null,
    "competence": []
  },
  {
    "id": "GRtIYxEvdOQJK3VPSJvy",
    "question": "Расскажите\n об Ajax как можно более подробно",
    "popularity": "3",
    "_id": {
      "$oid": "60de0704e2c8c53194aee440"
    },
    "answer": {
      "link": [
        "https://en.wikipedia.org/wiki/Ajax_(programming)",
        "https://developer.mozilla.org/en-US/docs/AJAX"
      ],
      "text": [
        "Ajax\n (асинхронный JavaScript и XML) - это набор методов веб-разработки,\n использующих множество веб-технологий на стороне клиента для создания\n асинхронных веб-приложений. С помощью Ajax веб-приложения могут отправлять\n данные на сервер и получать их с сервера асинхронно (в фоновом режиме), не\n влияя на отображение и поведение открытой страницы. Отделяя уровень обмена\n данными от уровня представления, Ajax позволяет веб-страницам и, в частности,\n веб-приложениям динамически изменять содержимое без необходимости\n перезагрузки всей страницы. На практике для получения/передачи данных\n используется формат данных JSON вместо XML из-за того, что JSON основан на\n JavaScript. <br>\n Раньше для асинхронного взаимодействия использовали XMLHttpRequest API, а\n сейчас принято использовать fetch API."
      ],
      "code": []
    },
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "description": "",
    "type": "question"
  },
  {
    "id": "Ghei604jqu37fNcSz4pG",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4be"
    },
    "answer": {
      "text": [
        "Необходимо\n реализовать функцию, принимающую в аргументах строку, состоящую из букв и\n вернуть новую строку, в которой повторяющиеся буквы заменены количеством\n повторений. <br>\n Например: <br>\n rle('AVVVBBBVVXDHJFFFFDDDDDDHAAAAJJJDDSLSSSDDDD'); // =&gt;\n 'AV3B3V2XDHJF4D6HA4J3D2SLS3D4' <br>\n function rle(str) { <br>\n const result = [str[0]]; <br>\n let count = 1; <br>\n for (let i = 1; i &lt; str.length; i++) { <br>\n if (str[i] === str[i - 1]) { <br>\n count++; <br>\n if (i === str.length - 1) { <br>\n result.push(str[i]); <br>\n if (count &gt; 1) { <br>\n result.push(count); <br>\n } <br>\n } <br>\n } else { <br>\n if (i &gt; 1) { <br>\n result.push(str[i - 1]); <br>\n } <br>\n if (i === str.length - 1) { <br>\n result.push(str[i]); <br>\n } <br>\n if (count &gt; 1) { <br>\n result.push(count); <br>\n } <br>\n count = 1; <br>\n } <br>\n } <br>\n return result.join(''); <br>\n } <br>\n "
      ],
      "link": [],
      "code": []
    },
    "type": "question",
    "question": "Задача:\n «Сжатие строк»",
    "popularity": null,
    "description": "",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior"
  },
  {
    "id": "Gi5Wxu2haYcHaidvt0Sa",
    "answer": {
      "link": [],
      "text": [
        "Укажите\n правильные утверждения. <br>\n а) создаются в локальном контексте <br>\n б) создаются в глобальном контексте <br>\n в) создание переменной без ключевого слова var — синтаксическая ошибка.\n <br>\n б) и в) <br>\n "
      ],
      "code": []
    },
    "popularity": null,
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "description": "",
    "question": "В\n js переменные объявленные следующим образом: <br>\n a=3; b=«hello»; <br>\n ",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ac"
    }
  },
  {
    "id": "H9nxep6x8M2pxQyNtSjh",
    "competence": [
      "javascript"
    ],
    "answer": {
      "link": [],
      "text": [
        "print\n speech"
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee475"
    },
    "description": "",
    "type": "question",
    "question": "Можете\n ли вы привести пример свойства @media, отличного от screen?",
    "difficulty": "junior",
    "popularity": null
  },
  {
    "id": "HW8iih6qjGR1npLsyhz9",
    "description": "",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "answer": {
      "code": [],
      "text": [
        "Каррирование\n — это паттерн, где функция с более чем одним параметром разбивается на\n несколько функций, которые при последовательном вызове будут накапливать все\n необходимые параметры по одному. Этот метод может быть полезен для облегчения\n чтения и написания кода, написанного в функциональном стиле. Важно отметить,\n что каррированная функция должна начинаться как одна функция, а затем\n разбиваться на последовательность функций, каждая из которых принимает один\n параметр. <br>\n function curry(fn) { <br>\n if (fn.length === 0) { <br>\n return fn; <br>\n } <br>\n function _curried(depth, args) { <br>\n return function(newArgument) { <br>\n if (depth — 1 === 0) { <br>\n return fn(…args, newArgument); <br>\n } <br>\n return _curried(depth — 1, […args, newArgument]); <br>\n }; <br>\n } <br>\n return _curried(fn.length, []); <br>\n } <br>\n function add(a, b) { <br>\n return a + b; <br>\n } <br>\n var curriedAdd = curry(add); <br>\n var addFive = curriedAdd(5); <br>\n var result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10] <br>\n "
      ],
      "link": [
        "https://hackernoon.com/currying-in-js-d9ddc64f162e"
      ]
    },
    "question": "Можете\n ли вы привести пример каррированной функции (curry function) и в чем их\n преимущество?",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee45f"
    }
  },
  {
    "id": "HdoUxyx7Y516ILbe45IC",
    "description": "Просто схематичное описание дизайна.",
    "question": "На каком ресурсе удобно рисовать моковый дизайн?",
    "popularity": "1",
    "type": "question",
    "difficulty": "beginner",
    "answer": {
      "text": [
        "draw.io"
      ],
      "code": [],
      "link": []
    },
    "competence": [
      "common questions"
    ]
  },
  {
    "id": "HzrXIhWqjVhq4CiFqb2u",
    "difficulty": "junior",
    "type": "exercise",
    "competence": [
      "javascript"
    ],
    "question": "Сделайте\n так, чтобы этот код работал: duplicate([1, 2, 3, 4, 5]); //\n [1,2,3,4,5,1,2,3,4,5]",
    "description": "",
    "answer": {
      "text": [
        "Решение:\n <br>\n function duplicate(arr) { <br>\n return arr.concat(arr); <br>\n } <br>\n duplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]"
      ],
      "link": [],
      "code": []
    },
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee44a"
    }
  },
  {
    "id": "IENjVzxf2Fw8d9e3nSsz",
    "description": "",
    "difficulty": null,
    "type": null,
    "competence": [],
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4db"
    },
    "question": "scope",
    "popularity": null
  },
  {
    "id": "IsSMKuaRbQFhtexYXzMc",
    "_id": {
      "$oid": "60de0704e2c8c53194aee467"
    },
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "description": "",
    "type": "question",
    "question": "Что\n означает CORS и какую проблему решает?",
    "difficulty": "junior",
    "answer": {
      "text": [
        "Cross-Origin\n Resource Sharing"
      ],
      "link": [],
      "code": []
    }
  },
  {
    "id": "ItXYrb6Xh63Y2Flpctva",
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "difficulty": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee515"
    },
    "popularity": null,
    "type": null,
    "question": "Что\n такое Promise"
  },
  {
    "id": "JFa76Vor5qzJlPjIgB7q",
    "popularity": null,
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "question": "Деревья",
    "difficulty": null,
    "type": null,
    "description": "",
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4fa"
    }
  },
  {
    "id": "JFtybyPf91Xg3kdxBkfB",
    "answer": {
      "code": [],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
        "https://ponyfoo.com/articles/es6-destructuring-in-depth"
      ],
      "text": [
        "Деструктуризация\n — это выражение, доступное в ES6, которое предоставляет краткий и удобный\n способ извлекать значения из объектов или массивов и помещать их в отдельные\n переменные. <br>\n <br>\n Деструктуризация массива <br>\n // Присваивание переменной <br>\n const foo = [‘one’, ‘two’, ‘three’]; <br>\n const [one, two, three] = foo; <br>\n console.log(one); // “one” <br>\n console.log(two); // “two” <br>\n console.log(three); // “three” <br>\n // Перестановка переменных местами <br>\n let a = 1; <br>\n let b = 3; <br>\n [a, b] = [b, a]; <br>\n console.log(a); // 3 <br>\n console.log(b); // 1 <br>\n <br>\n Деструктуризация объекта <br>\n // Присваивание переменной <br>\n const o = { p: 42, q: true }; <br>\n const { p, q } = o; <br>\n console.log(p); // 42 <br>\n console.log(q); // true <br>\n "
      ]
    },
    "question": "Можете\n ли вы привести пример деструктуризации объекта или массива?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee45d"
    },
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "description": "",
    "popularity": null,
    "type": "question"
  },
  {
    "id": "JPHYu3QKa4LMysIkdaJr",
    "question": "High\n order functions и карриррование",
    "competence": [],
    "difficulty": null,
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee520"
    },
    "popularity": null,
    "type": null,
    "description": ""
  },
  {
    "id": "JSVczdxBDyp5u1FK2ClZ",
    "answer": {
      "link": [
        "https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection",
        "https://stackoverflow.com/questions/20104930/whats-the-difference-between-feature-detection-feature-inference-and-using-th",
        "https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent"
      ],
      "text": [
        "Feature\n detection (определение возможностей браузера) <br>\n Определение возможностей браузера заключается в определении, поддерживает\n ли браузер определенный блок кода - и если нет, то будет выполняться другой\n код, так что браузер всегда сможет обеспечить работоспособность и\n предотвратить сбои/ошибки в некоторых браузерах. Например: <br>\n if ('geolocation' in navigator) { <br>\n // Можно использовать navigator.geolocation <br>\n } else { <br>\n // Обработка отсутствия возможности <br>\n } <br>\n Modernizr - отличная библиотека для обработки таких функций. <br>\n Feature inference (предположение возможностей) <br>\n Предположение возможностей проверяет на наличие определенных возможностей,\n как и предыдущий подход, но использует другую функцию, которая предполагает,\n что определенная возможность уже существует, например: <br>\n if (document.getElementsByTagName) { <br>\n element = document.getElementById(id); <br>\n } <br>\n Этот подход не рекомендуется. Первый подход более надежен. <br>\n Строка User Agent <br>\n Это строка, сообщаемая браузером, которая позволяет узлам сетевого\n протокола определить тип приложения, операционную систему, поставщика\n программного обеспечения или версию программного обеспечения пользователя от\n которого исходит запрос. Доступ к ней можно получить через\n navigator.userAgent. Тем не менее, строка User Agent сложна для обработки и\n может быть подделана. Например, браузер Chrome идентифицируется как Chrome,\n так и Safari. Таким образом, чтобы обнаружить браузер Safari, вы должны\n проверить на наличие строки Safari и отсутствие строки Chrome. Избегайте\n этого метода."
      ],
      "code": []
    },
    "type": "question",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee43f"
    },
    "popularity": "3",
    "competence": [
      "common questions"
    ],
    "description": "",
    "question": "В\n чем разница между feature detection (определение возможностей браузера),\n feature inference (предположение возможностей) и анализом строки user-agent?"
  },
  {
    "id": "K1Q2gEnciu6dCfSN5U6w",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "question": "Почему\n тернарный оператор так называется?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee44b"
    },
    "type": "question",
    "answer": {
      "link": [
        "https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"
      ],
      "code": [],
      "text": [
        "“Тернарный”\n означает три. Троичное выражение принимает три операнда: условие, выражение\n “then” и выражение “else”. Тернарные операторы не являются исключительными\n для JavaScript, и я не знаю, почему подобный вопрос был добавлен в этот\n список."
      ]
    },
    "description": "",
    "difficulty": "junior"
  },
  {
    "id": "K5n1yhtoklElZKsJSBLq",
    "description": "",
    "competence": [],
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4fd"
    },
    "type": null,
    "question": "Хеш-таблицы",
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "popularity": null
  },
  {
    "id": "KIyKy6lHaUwRmHMDZGyQ",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "Прогрессивный\n рендеринг — имя, данное технологиям, используемым для ускорения\n отрисовки страниц (в частности, уменьшение времени загрузки), чтобы показать\n пользователю контент как можно скорее. <br>\n До того, как широкополосный интернет распространился повсеместно,\n прогрессивный рендеринг встречался довольно часто. Но этот подход по прежнему\n полезен в современной разработке, поскольку все более популярным (и\n ненадежным) становится мобильный доступ в интернет. <br>\n Примеры технологий: <br>\n Ленивая загрузка картинок. Картинки на странице не загружаются все разом.\n JavaScript подгрузит картинки тогда, когда пользователь доскроллит до той\n части страницы, на которой они расположены. <br>\n Приоритизация видимого контента. Только минимум CSS, контента, скриптов,\n необходимых для отрисовки той части страницы, которую пользователь увидит\n первой. Вы можете использовать отложенные скрипты или слушать события\n DOMContentLoaded или load, чтобы загрузить остальные ресурсы и контент.\n <br>\n Асинхронные фрагменты HTML. Отправка в браузер частей HTML-страницы,\n созданной на бэкенде. Более подробно про эту технологию можно почитать в этой\n статье. <br>\n "
      ]
    },
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "type": "question",
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee46f"
    },
    "question": "Что\n такое прогрессивный рендеринг?",
    "difficulty": "junior"
  },
  {
    "id": "KON9zLObxM9gMwGvnKFP",
    "competence": [
      "javascript"
    ],
    "question": "Чем\n opacity отличается от visible: hidden и что это такое, отличие от overflow:\n hidden?",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee49d"
    },
    "popularity": null,
    "description": "",
    "type": "question",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "opacity\n отвечает за прозрачность элемента. Принимает значения от 0 до 1, при 0 —\n элемент не виден, .5 — полупрозрачен, 1 — полностью виден. Даже при 0\n занимает место на странице. <br>\n Элемент со стилями visible: hidden так же занимает место, не видим. Но в\n отличие от элемента с opacity, js-события на нем не срабатывают. <br>\n display: none — полностью скрывает элемент, он не видим и не занимает место\n на странице. javascript не может получить ни width, height. <br>\n overflow: hidden; — скрывает все, что попадет за его пределы. <br>\n "
      ]
    }
  },
  {
    "id": "Kcgo1MqGhzDW7vee07vG",
    "description": "",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b2"
    },
    "type": "question",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "promiseAll([\n <br>\n new Promise((resolve) =&gt; { <br>\n setTimeout(() =&gt; resolve('foo'), 5000) <br>\n }), <br>\n new Promise((resolve, reject) =&gt; { <br>\n setTimeout(() =&gt; resolve('bar'), 1000); <br>\n }), <br>\n new Promise((resolve, reject) =&gt; { <br>\n setTimeout(() =&gt; { <br>\n Math.round(Math.random() * 10) % 2 === 0 <br>\n ? resolve('baz') <br>\n : reject(new Error()); <br>\n }, 300); <br>\n }), <br>\n ]) <br>\n .then((res) =&gt; console.log('RESOLVED: ', res)) <br>\n .catch((err) =&gt; console.log('REJECTED: ', err));"
      ]
    },
    "popularity": null,
    "question": "Задача:\n Реализовать аналог Promise.all.",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "KnpKpqDU6JwxksbxyPBM",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4fc"
    },
    "competence": [],
    "difficulty": null,
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">Боры (в сущности, это тоже деревья, но их\n целесообразно рассмотреть отдельно). Префиксное дерево (Trie)</div>\n </div>",
    "type": null,
    "popularity": null,
    "description": ""
  },
  {
    "id": "KuvFIW7XQSJjksPXCMKo",
    "popularity": "5",
    "question": "Объясните,\n как this работает в JavaScript",
    "answer": {
      "link": [
        "https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3",
        "https://stackoverflow.com/a/3127440/1751946"
      ],
      "text": [
        "Нельзя\n в двух словах объяснить работу ключевого слова this; это одно из самых\n запутанных понятий в JavaScript. Говоря максимально простым языком, значение\n this зависит от того, как вызывается функция. Я прочитал много объяснений о\n работе this, и считаю объяснение Arnav Aggrawal наиболее понятным.\n Применяются следующие правила:<br>\n 1. Если ключевое слово new используется при вызове функции, this внутри\n функции является совершенно новым объектом.<br>\n 2. Если для вызова/создания функции используются apply, call или bind, то\n this внутри функции — это объект, который передается в качестве\n аргумента.<br>\n 3. Если функция вызывается как метод, например, obj.method(), то this — это\n объект, к которому принадлежит функция.<br>\n 4. Если функция вызывается без контекста, то есть она вызывается без\n условий, описанных в пунктах выше, то this является глобальным объектом. В\n браузере это объект window. В строгом режиме (’use strict’), this будет\n undefined вместо глобального объекта.<br>\n 5. Если применяются несколько из вышеперечисленных правил, то правило,\n которое выше выигрывает и устанавливает значение this.<br>\n 6. Если функция является стрелочной функцией, то она игнорирует все\n вышеописанные правила и получает значение this из лексического окружения во\n время ее создания.<br>\n "
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee431"
    },
    "difficulty": "junior",
    "description": "",
    "type": "question",
    "competence": [
      "javascript",
      "typescript"
    ]
  },
  {
    "id": "Lbp2IhRGlHsoNfTL5Hg2",
    "type": "question",
    "question": "Что-такое\n хэш-таблица?",
    "difficulty": "junior",
    "description": "",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "answer": {
      "text": [
        "Ассоциативный\n массив — абстрактный тип данных, с помощью которого хранятся пары\n ключ-значение. У него есть и другие названия: \"словарь\",\n \"мап\" (от слова map). В разных языках ему соответствуют разные типы\n данных. В JavaScript — это Object, в других языках: <br>\n Структура данных, которая позволяет хранить пары ключ-значение и выполнять\n три операции над ними: добавление новой пары, поиск значение по ключу и\n удаление пары по ключу. <br>\n "
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4cb"
    }
  },
  {
    "id": "MDQhdrkfb6wyPacu02x1",
    "popularity": null,
    "answer": {
      "text": [
        "var\n arr = [ <br>\n {name: 'width', value: 10}, <br>\n {name: 'height', value: 20} <br>\n ] <br>\n // на выходе объект <br>\n {width: 10, height: 20} <br>\n function getObj(arr) { <br>\n var obj = {}; <br>\n <br>\n arr.forEach(function(item){ <br>\n obj[item.name] = item.value; <br>\n }); <br>\n <br>\n return obj; <br>\n }"
      ],
      "code": [],
      "link": []
    },
    "description": "",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "question": "Напишите\n код, который сделает из массива объект",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a8"
    }
  },
  {
    "id": "NU4LB9xHGMiX8YLrLBZ3",
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4eb"
    },
    "difficulty": null,
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">__proto__ (reference to Class.prototype)</div>\n </div>",
    "competence": [],
    "type": null,
    "popularity": null,
    "description": ""
  },
  {
    "id": "Ny0dOVaPgf0I3ItMuzLx",
    "popularity": "4",
    "type": "question",
    "answer": {
      "code": [],
      "text": [
        "Это как в rxjs Observable Subject BehaviourSubject\nМожно подписать компоненты, они наблюдают за изменениями и изменения прокидывается ко всем, кто за ними наблюдает"
      ],
      "link": []
    },
    "question": "Что такое observer pattern?",
    "description": "observer ",
    "difficulty": "senior",
    "competence": [
      "common questions",
      "javascript"
    ]
  },
  {
    "id": "NzAPv7lDVHU8aBmTTuiy",
    "type": "question",
    "description": "Как в Babel выглядит async функция?",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "async => asyncGeneratorStep in Babel (так асинхронная функция отображается в файле после пропуск через полифил)"
      ]
    },
    "competence": [
      "javascript"
    ],
    "difficulty": "middle",
    "popularity": "1",
    "question": "Как в Babel выглядит async функция?"
  },
  {
    "id": "OFOpmVC70kOrPuPWCeJi",
    "popularity": "1",
    "description": "contenteditable in html",
    "competence": [
      "html",
      "css",
      "frontend"
    ],
    "type": "question",
    "question": "Что за свойство contenteditable?",
    "answer": {
      "link": [],
      "text": [
        "свойство прописать в div и можно писать прямо в диве как в инпуте(spellcheck=\"false\" убирает проверку на ввоимые слова)"
      ],
      "code": []
    },
    "difficulty": "beginner"
  },
  {
    "id": "OOZumNsxsf2CMYgiJSKl",
    "competence": [
      "javascript"
    ],
    "question": "Насколько\n вы опытны в работе с промисами (promises) и/или их полифилами?",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee451"
    },
    "description": "",
    "type": "question",
    "answer": {
      "link": [
        "https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261"
      ],
      "code": [],
      "text": [
        "Обладаю\n практическими знаниями о них. Промис — это объект, который может вернуть одно\n значение в будущем: либо выполненное значение, либо причина, по которой оно\n не было выполнено (например, произошла ошибка сети). Промис может находиться\n в одном из 3 возможных состояний: выполнено, отклонено или ожидает\n выполнения. При использовании промисов можно добавлять callback-функции для\n обработки выполненного значения или причины отказа. <br>\n Некоторыми распространенными полифилами являются $.deferred, Q и Bluebird,\n но не все они соответствуют спецификации. ES2015 поддерживает промисы “из\n коробки”, и в настоящее время полифилы обычно не нужны. <br>\n "
      ]
    },
    "popularity": null
  },
  {
    "id": "OV2Bul5DgPjOIY0CGoQl",
    "description": "Деструктивное присваивание",
    "difficulty": "middle",
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [
        "// we have an array with the name and surname\nlet arr = [\"John\", \"Smith\"]\n\n// destructuring assignment\n// sets firstName = arr[0]\n// and surname = arr[1]\nlet [firstName, surname] = arr;\n\nalert(firstName); // John\nalert(surname);  // Smith"
      ],
      "text": [
        "Раскрывает массив или обьект и присваивает значения из массива"
      ],
      "link": [
        "https://dmitripavlutin.com/javascript-object-destructuring/",
        "https://javascript.info/destructuring-assignment"
      ]
    },
    "popularity": "5",
    "question": "Что такое деструктулизация?",
    "type": "question"
  },
  {
    "id": "OZ02wMlKxpHqt27XJk0R",
    "_id": {
      "$oid": "60de0704e2c8c53194aee499"
    },
    "difficulty": "junior",
    "type": "question",
    "popularity": null,
    "question": "От\n них же. Числа от 1 до 100 лежат в массиве, они хаотично перемешанные, от туда\n изъяли одно число, надо найти, что это за число. алгоритм не должен превышать\n O(n^2) сложности.",
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Пройти\n массив циклом и сложить все имеющиеся там цифры и вычесть из числа,\n полученного по формуле (n + 1) / (n / 2)."
      ]
    },
    "description": ""
  },
  {
    "id": "Oz3DOPJuQ5JCy6pAspQY",
    "question": "Дана\n функция, она принимает в качестве аргументов строки '*', '1', 'b', '1c',\n реализуйте ее так, что бы она вернула строку '1*b*1c'",
    "type": "question",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee48b"
    },
    "difficulty": "junior",
    "answer": {
      "text": [
        "Ее\n можно решать прямо в лоб, перебирая в цикле все аргументы, но мы поступим\n умнее. <br>\n <br>\n Дано дерево, надо найти сумму всех вершин. <br>\n Я решила задачу рекурсией, потом мы упростили решение, а затем переписали\n на очередь. <br>\n var sum = 0; <br>\n <br>\n function getSum(obj) { <br>\n sum += obj.valueNode; <br>\n if (obj.next != null) { <br>\n for (var i = 0; i &lt; obj.next.length; i++) { <br>\n getSum(obj.next[i]); <br>\n } <br>\n } <br>\n <br>\n return sum; <br>\n } <br>\n <br>\n var tree1 = { <br>\n valueNode: 1, <br>\n next: [ <br>\n { <br>\n valueNode: 3, <br>\n next: null <br>\n }, <br>\n { <br>\n valueNode: 2, <br>\n next: null <br>\n } <br>\n ] <br>\n } <br>\n "
      ],
      "code": [],
      "link": []
    },
    "description": "",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "PPNVLsLJp1YaBIxIuKut",
    "competence": [
      "javascript",
      "html"
    ],
    "answer": {
      "code": [],
      "text": [
        "(data-attr, getAttribute(attr) | DOMStringMap{resize: col} e.target.dataset.resize)"
      ],
      "link": []
    },
    "question": "Что такое что такое data атрибуты?",
    "type": "question",
    "difficulty": "junior",
    "popularity": "4",
    "description": "Как они используются и для чего?"
  },
  {
    "id": "PUD6Y8wlnEaUSAq92Z6v",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee458"
    },
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "Переменные,\n объявленные при помощи ключевого слова var, относятся к области видимости\n функции, в которой они созданы. Или, если они созданы вне какой-либо функции\n — к глобальному объекту. let и const относятся к блочной области видимости —\n это означает, что они доступны только в пределах ближайшего набора фигурных\n скобок (функция, блок if-else или цикл for). <br>\n function foo() { <br>\n // Все переменные доступны внутри функции. <br>\n var bar = 'bar'; <br>\n let baz = 'baz'; <br>\n const qux = 'qux'; <br>\n console.log(bar); // bar <br>\n console.log(baz); // baz <br>\n console.log(qux); // qux <br>\n } <br>\n console.log(bar); // ReferenceError: bar is not defined <br>\n console.log(baz); // ReferenceError: baz is not defined <br>\n console.log(qux); // ReferenceError: qux is not defined <br>\n if (true) { <br>\n var bar = 'bar'; <br>\n let baz = 'baz'; <br>\n const qux = 'qux'; <br>\n } <br>\n // переменные, объявленные при помощи var, доступны в любом месте функции.\n <br>\n console.log(bar); // bar <br>\n // переменные, объявленные при помощи let и const не доступны вне блока, в\n котором были определены. <br>\n console.log(baz); // ReferenceError: baz is not defined <br>\n console.log(qux); // ReferenceError: qux is not defined <br>\n var позволяет поднимать переменные, что означает, что на них можно\n ссылаться в коде до их объявления. let и const не позволяют этого, и выдают\n ошибку. <br>\n console.log(foo); // undefined <br>\n var foo = 'foo'; <br>\n console.log(baz); // ReferenceError: can’t access lexical declaration 'baz'\n before initialization <br>\n let baz = 'baz'; <br>\n console.log(bar); // ReferenceError: can’t access lexical declaration 'bar'\n before initialization <br>\n const bar = 'bar'; <br>\n Переопределение переменной с помощью var не вызовет ошибку, в отличие от\n let и const. <br>\n var foo = 'foo'; <br>\n var foo = 'bar'; <br>\n console.log(foo); // “bar” <br>\n let baz = 'baz'; <br>\n let baz = 'qux'; // Uncaught SyntaxError: Identifier ‘baz’ has already been\n declared <br>\n let отличается от const тем, что изменять значение const нельзя. <br>\n // Это нормально. <br>\n let foo = 'foo'; <br>\n foo = 'bar'; <br>\n // Это вызывает исключение. <br>\n const baz = 'baz'; <br>\n baz = 'qux';"
      ],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"
      ],
      "code": []
    },
    "description": "",
    "question": "В\n чем различие между переменными, созданными при помощи `let`, `var` и `const`?",
    "popularity": null,
    "difficulty": "junior"
  },
  {
    "id": "PqA1QdpvpAJ2dgggjWWI",
    "difficulty": "senior",
    "competence": [
      "common questions",
      "javascript"
    ],
    "popularity": "5",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "DIP"
      ]
    },
    "question": "Что такое DIP deep indencemble dependens inversioal principal",
    "type": "question",
    "description": "DIP"
  },
  {
    "id": "PtApcR5V8eemQbgkcjLr",
    "answer": {
      "text": [
        "1020"
      ],
      "code": [],
      "link": []
    },
    "difficulty": "junior",
    "description": "",
    "type": "question",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee481"
    },
    "question": "Вопрос:\n Чему равно foo? var foo = 10 + '20'"
  },
  {
    "id": "Pxsh7XJOa8BTiWofuAZ2",
    "description": "root em",
    "competence": [
      "html",
      "css"
    ],
    "answer": {
      "link": [],
      "text": [
        "размер шрифта относительный использовать root em"
      ],
      "code": []
    },
    "popularity": "2",
    "type": "question",
    "difficulty": "junior",
    "question": "Что такое величина rem?"
  },
  {
    "id": "QAtNMBy6kgEzejh94eYW",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e8"
    },
    "difficulty": null,
    "competence": [],
    "question": "optimizing\n compiler",
    "popularity": null,
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "type": null
  },
  {
    "id": "QNnCoC8TiIqRypaUSwOy",
    "type": "question",
    "question": "Представьте\n HTML5 как открытую веб-платформу. Из каких блоков состоит HTML5?",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Семантика.\n Позволяет более точно описать из чего состоит контент. <br>\n Связанность. Позволяет общаться с сервером новыми и инновационными\n способами. <br>\n Офлайн и хранилище. Позволяют страницам хранить данные локально на\n клиентской стороне и более эффективно работать в офлайне. <br>\n Мультимедиа. Ставит создание видео и аудио на первое место в вебе. <br>\n 2D- и 3D-графика и эффекты. Позволяет расширить возможности презентации.\n <br>\n Производительность и интеграция. Обеспечивает большую скорость оптимизации\n и лучшее использование аппаратных средств. <br>\n Доступ к устройствам. Позволяет взаимодействовать с различными устройствами\n ввода и вывода. <br>\n Стилизация. Позволяет создавать более сложные темы оформления. <br>\n "
      ]
    },
    "popularity": null,
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d2"
    }
  },
  {
    "id": "QWnIdqdjuKLPnu329EoI",
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee50d"
    },
    "competence": [],
    "popularity": null,
    "type": null,
    "description": "",
    "difficulty": null,
    "question": "Различие\n операторов сравнения"
  },
  {
    "id": "QkM5mFj3BNZLnFiCIE4U",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "difficulty": null,
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d7"
    },
    "description": "",
    "popularity": null,
    "competence": [],
    "question": "heap"
  },
  {
    "id": "QxUkf5SX5v5wsdkiorjp",
    "popularity": null,
    "question": "Что\n выведется в результате?",
    "difficulty": "junior",
    "answer": {
      "text": [
        "var\n i = 10; <br>\n <br>\n var array = []; <br>\n <br>\n while (i--) { <br>\n <br>\n (function (i) { <br>\n <br>\n var i = i; <br>\n <br>\n array.push(function() { <br>\n <br>\n return i + i; <br>\n <br>\n }); <br>\n <br>\n })(i); <br>\n <br>\n } <br>\n <br>\n console.log([ <br>\n <br>\n array[0](), <br>\n <br>\n array[1](), <br>\n <br>\n ]) <br>\n <br>\n [18, 16], так как за счет функции <br>\n <br>\n (function (i) {})(i); <br>\n <br>\n создает замыкание, var i = i — уже принадлежат областям видимости в\n замыканиях. <br>\n <br>\n function() { return i + i; } <br>\n <br>\n в начале поищет в своей области видимости i, не найдя, подымется на уровень\n выше и там найдет его. Из функции вернется сумма, которая будет положена в\n массив последним элементом."
      ],
      "link": [],
      "code": []
    },
    "description": "",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a9"
    }
  },
  {
    "id": "R5jB5haIzXlVWwJp7QmM",
    "_id": {
      "$oid": "60de0704e2c8c53194aee507"
    },
    "difficulty": null,
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">L - Liskov substitution principle - принцип\n подстановки, обьекты нследники должны иметь туже логику</div>\n </div>",
    "description": "",
    "popularity": null,
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "type": null,
    "competence": []
  },
  {
    "id": "REc4jqjCIcc7wLnvZKg5",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "question": "Задача:\n Сумма вершин дерева",
    "type": "question",
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Очень\n похоже на предыдущую задачу, только требуется найти сумму значений. <br>\n Через рекурсию: <br>\n function getTreeSum(node) { <br>\n let sum = node.value; <br>\n if (Array.isArray(node.children)) { <br>\n node.children.forEach(item =&gt; sum += getTreeSum(item)); <br>\n } <br>\n return sum; <br>\n } <br>\n Как видно не только задача, но и её решение практически идентичны\n предыдущей задаче. <br>\n Также, как и предыдущую её можно решить без рекурсии, обойдясь циклом,\n приводить его не буду, т.к. оно тоже практически идентично предыдущей задаче."
      ]
    },
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ba"
    }
  },
  {
    "id": "RIWB91aVtLtPlyWVuwWH",
    "type": "question",
    "popularity": "5",
    "question": "В чем разлиция Dump components/smart components?",
    "competence": [
      "common questions",
      "javascript",
      "frontend"
    ],
    "answer": {
      "link": [],
      "text": [
        "В одном логика, в другом отображение"
      ],
      "code": []
    },
    "description": "Глупый и умный компоненты",
    "difficulty": "middle"
  },
  {
    "id": "RKykKx8IpQoDHQLI8Bty",
    "_id": {
      "$oid": "60de0704e2c8c53194aee473"
    },
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "1\n <br>\n .clear { <br>\n 2 <br>\n clear:both; <br>\n 3 <br>\n font-size:0; <br>\n 4 <br>\n overflow:hidden; /* для IE */ <br>\n 5 <br>\n } <br>\n 1 <br>\n .wraprightcol:after { <br>\n 2 <br>\n content: \".\"; <br>\n 3 <br>\n display: block; <br>\n 4 <br>\n height: 0; <br>\n 5 <br>\n clear: both; <br>\n 6 <br>\n visibility: hidden; <br>\n 7 <br>\n }"
      ]
    },
    "difficulty": "junior",
    "question": "Какие\n вы знаете методы запрета обтекания (clearing) и в каких случаях они\n применяются?",
    "popularity": null,
    "type": "question",
    "description": "",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "Rg7UphtQow2bbE66VC4H",
    "question": "Есть\n несколько слов, определить состоят ли они из одних и тех же букв('кот',\n 'ток', 'окт')",
    "popularity": null,
    "description": "",
    "answer": {
      "link": [],
      "text": [
        "var\n arr = ['kot', 'tok', 'okt'], <br>\n arr1 = ['kot', 'tok', 'ott']; <br>\n function sameWords(arr) { <br>\n var word1, word2; <br>\n for (var i = 0; i &lt; arr.length-1; i++) { <br>\n word1 = 0; <br>\n word2 = 0; <br>\n if (arr[i].length !== arr[i+1].length) { <br>\n return false; <br>\n } else { <br>\n for (var j = 0; j &lt; arr[i].length; j++) { <br>\n word1 += arr[i][j].charCodeAt(0); <br>\n word2 += arr[i+1][j].charCodeAt(0); <br>\n } <br>\n if (word1 !== word2) { <br>\n return false; <br>\n } <br>\n } <br>\n } <br>\n return true; <br>\n } <br>\n console.log(sameWords(arr)); <br>\n console.log(sameWords(arr1)); <br>\n "
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee493"
    },
    "competence": [
      "javascript"
    ],
    "type": "question",
    "difficulty": "junior"
  },
  {
    "id": "RqDGmtmHF4si2DEiK495",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4bc"
    },
    "question": "Задача:\n Идентичный алфавит",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "description": "",
    "difficulty": "junior",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "Необходимо\n написать функцию, принимающую в аргументах две строки и возвращающую true,\n если эти строки состоят из идентичных букв и false в противном случае. <br>\n Например: <br>\n isEqualSymbols('кот', 'ток'); // =&gt; true <br>\n isEqualSymbols('кот', 'тик'); // =&gt; false <br>\n function isEqualSymbols(str1, str2) { <br>\n if (str1.length !== str2.length) { <br>\n return false; <br>\n } <br>\n if (str1.split('').sort().join('') === str2.split('').sort().join('')) {\n <br>\n return true; <br>\n } <br>\n return false; <br>\n } <br>\n Этот вариант решения исходит из того, что каждый символ уникален сам по\n себе и если в одной из строк встречаются повторяющиеся символы, а в другой\n нет, то это разные наборы символов и в результате должно вернуться false.\n <br>\n Если же будет необходимо исходить из того, что символы не уникальны сами по\n себе и повторные символы должны игнорироваться, то можно предварительно\n уникализировать символы в обоих строках, воспользовавшись одним из решений из\n задачи об уникализации значений в массиве. <br>\n "
      ]
    }
  },
  {
    "id": "RrNUIEE4Z0zrCLtpygqB",
    "popularity": null,
    "description": "",
    "competence": [],
    "difficulty": null,
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4fe"
    },
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">Компиляторы: AOT agead-of-time(компилируют до\n выполнения); JIT - Just-in-time</div>\n </div>"
  },
  {
    "id": "Rtwe49c4cPQM9fnDdgz5",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "function\n f() { console.log(this.x); } <br>\n var obj = {x: 'bar'}; <br>\n f.call(obj, a, b); <br>\n f.apply(obj, [a, b]); <br>\n obj.funk = function f() { console.log(this.x); } <br>\n obj.funk(); <br>\n function f() { console.log(this.x); }.bind(obj, a, b); <br>\n f(); <br>\n "
      ]
    },
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4aa"
    },
    "description": "",
    "difficulty": "junior",
    "type": "question",
    "question": "Есть\n функция и объект. Напишите все известные вам способы, чтобы вывести в консоли\n значение x из объекта используя функцию",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "S0q7lzF1EcXNgChtwzag",
    "difficulty": null,
    "type": null,
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "description": "",
    "popularity": null,
    "competence": [],
    "question": "В\n чем заключается отличие классов в JS от классов в других языках",
    "_id": {
      "$oid": "60de0704e2c8c53194aee522"
    }
  },
  {
    "id": "S9XIZVzXtSNTGWwgNAEt",
    "difficulty": null,
    "popularity": null,
    "question": "В\n чем отличие null и undefined",
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "description": "",
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee50b"
    },
    "competence": []
  },
  {
    "id": "SJfN776ZphQm0ecma3wC",
    "popularity": null,
    "difficulty": "junior",
    "answer": {
      "code": [],
      "text": [
        "Про\n HTTP-методы и CRUD: <br>\n GET — read — используется только для получения данных. <br>\n POST — create — создание новых сущностей. <br>\n PUT/PATCH — update — обновление данных. <br>\n DELETE — delete — удаление. <br>\n Вообще HTTP-методов сильно больше, помимо выше перечисленных есть OPTIONS,\n HEAD, TRACE и др. <br>\n "
      ],
      "link": []
    },
    "question": "Вопрос:\n Назовите известные вам HTTP-методы. Что такое CRUD?",
    "competence": [
      "javascript"
    ],
    "description": "",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c1"
    }
  },
  {
    "id": "SuWzKPWtDqZdedCDgAns",
    "popularity": null,
    "description": "",
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee517"
    },
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "type": null,
    "question": "Что\n такое чистая функция",
    "competence": []
  },
  {
    "id": "T32KrdVYwNTq8qqpADfz",
    "description": "",
    "type": "question",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee46c"
    },
    "question": "Объясните\n разницу между cookie, sessionStorage и localStorage.",
    "answer": {
      "text": [
        "LocalStorage:\n <br>\n Хранит данные постоянно, так как дата истечения срока хранения информации\n не устанавливается. Очищается исключительно через средства, предоставляемые\n JavaScript или посредством очистки кэша браузера и локально сохраненных\n данных в настройках браузера. <br>\n Самый большой объем хранения данных среди всех трех технологий <br>\n SessionStorage: <br>\n Объект sessionStorage хранит данные только в рамках сессии, т.е. это\n означает, что данные сохраняются до тех пор пока не закрыт браузер или\n вкладка браузера. <br>\n Данные никогда не отправляются на сервер. <br>\n Объем для сохранения данных намного больше чем у Cookie - по крайней мере\n 5MB. <br>\n Cookie: <br>\n Хранит данные, которые должны быть отправлены на сервер с последующими\n запросами. Срок экспирации различающийся, в зависимости от типа и\n продолжительности срока хранения, может быть установлен либо на стороне\n сервера или на стороне клиента (хотя, как правило, на стороне сервера).\n <br>\n Cookie, в первую очередь, предназначены для чтения на стороне сервера,\n однако могут быть прочитаны и на стороне клиента. В свою очередь localStorage\n и sessionStorage могут быть прочитаны только на стороне клиента. <br>\n Размер должен быть менее 4KB. <br>\n Cookie можно сделать защищенными, установив флаг httpOnly равным true. Это\n приведет к недоступности Cookie на стороне клиента. <br>\n "
      ],
      "code": [],
      "link": []
    },
    "popularity": null
  },
  {
    "id": "T6OPQ2651SVw9XCpVQZH",
    "popularity": null,
    "description": "",
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee51a"
    },
    "type": null,
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "difficulty": null,
    "question": "Зачем\n нам нужны стрелочные функции"
  },
  {
    "id": "T9EdVPQ9uYvl6PtjOrtL",
    "difficulty": "junior",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "\"i'm\n a lasagna hog\".split(\"\").reverse().join(\"\");\n reversed"
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee484"
    },
    "popularity": null,
    "type": "question",
    "question": "Какое\n значение возвращает данное выражение?",
    "description": "",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "TYcFcGe1tRmFXE6TV5tZ",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c2"
    },
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "const\n palindrome = str =&gt; { <br>\n // Меняем регистр строки на нижний <br>\n str = str.toLowerCase() <br>\n // Переворачиваем строку и возвращаем результат сравнения <br>\n return str === str.split('').reverse().join('') <br>\n } <br>\n "
      ]
    },
    "type": "question",
    "description": "",
    "popularity": null,
    "question": "Палиндром",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior"
  },
  {
    "id": "TZudOEUrffTB5VTPbJbh",
    "difficulty": "junior",
    "question": "Задача:\n Сортировка нечётных.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4bb"
    },
    "answer": {
      "text": [
        "Необходимо\n написать функцию, принимающую в аргументах массив и возвращающую новый\n массив, в котором отсортированы все нечетные числа по возрастанию, в то время\n как чётные остаются на своих местах. <br>\n Например: <br>\n oddSort([7, 3, 4, 9, 5, 2, 17]); // =&gt; [3, 5, 4, 7, 9, 2, 17] <br>\n function oddSort(arr) { <br>\n arr.forEach((item, index) =&gt; { <br>\n if (item % 2 === 1) { <br>\n let sortNumber = item; <br>\n for (let i = 0; i &lt; index; i++) { <br>\n if (arr[i] % 2 === 1) { <br>\n if (arr[i] &gt; sortNumber) { <br>\n const tmp = sortNumber; <br>\n <br>\n sortNumber = arr[i]; <br>\n arr[i] = tmp; <br>\n } <br>\n } <br>\n } <br>\n arr[index] = sortNumber; <br>\n } <br>\n }); <br>\n return arr; <br>\n } <br>\n "
      ],
      "link": [],
      "code": []
    },
    "competence": [
      "javascript"
    ],
    "type": "question",
    "description": "",
    "popularity": null
  },
  {
    "id": "TvjoTPf1M4A8tCS2bQT1",
    "question": "Чему\n равно window.foo?",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee485"
    },
    "type": "question",
    "difficulty": "junior",
    "description": "",
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "(\n window.foo || ( window.foo = \"bar\" ) ); bar"
      ],
      "link": [],
      "code": []
    }
  },
  {
    "id": "U4CpZFMrXIlowyFMu6Gn",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "type": "question",
    "description": "",
    "answer": {
      "link": [],
      "text": [
        "const\n findVowels = str =&gt; { <br>\n let count = 0 <br>\n const vowels = ['a', 'e', 'i', 'o', 'u'] <br>\n for(let char of str.toLowerCase()) { <br>\n if(vowels.includes(char)) { <br>\n count++ <br>\n } <br>\n } <br>\n return count <br>\n } <br>\n или <br>\n const findVowels = str =&gt; { <br>\n const matches = str.match(/[aeiou]/gi) <br>\n return matches ? matches.length : 0 <br>\n } <br>\n "
      ],
      "code": []
    },
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c5"
    },
    "question": "Найти\n гласные"
  },
  {
    "id": "U7ygidSaC4sw1CE0a24O",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d8"
    },
    "competence": [],
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "description": "",
    "difficulty": null,
    "popularity": null,
    "question": "call\n stack",
    "type": null
  },
  {
    "id": "UhBzHD9HIzRruSCG2TOJ",
    "type": "question",
    "difficulty": "junior",
    "popularity": null,
    "answer": {
      "code": [],
      "text": [
        "Long-Polling\n <br>\n Клиент запрашивает веб-страницу с сервера с использованием обычного HTTP\n (см. HTTP выше). <br>\n Клиент получает запрошенную веб-страницу и выполняет JavaScript на\n странице, которая запрашивает файл с сервера. <br>\n Сервер не сразу отвечает запрошенной информацией, но ждет, пока не появится\n новая информация. <br>\n Когда появится новая информация, сервер отвечает новой информацией. <br>\n Клиент получает новую информацию и немедленно отправляет другой запрос на\n сервер, повторно запуская процесс. <br>\n <br>\n События, отправленные сервером HTML5 (SSE)/EventSource: <br>\n Клиент запрашивает веб-страницу с сервера с использованием обычного HTTP\n (см. HTTP выше). <br>\n Клиент получает запрошенную веб-страницу и выполняет JavaScript на\n странице, которая открывает соединение с сервером. <br>\n Сервер отправляет событие клиенту, когда появляется новая информация.\n <br>\n <br>\n Трафик реального времени от сервера к клиенту, в основном, что вам нужно\n <br>\n Вы хотите использовать сервер с циклом событий <br>\n Невозможно установить соединение с сервером из другого домена"
      ],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events",
        "http://html5doctor.com/server-sent-events/#api",
        "https://www.html5rocks.com/en/tutorials/eventsource/basics/",
        "https://jaxenter.com/tutorial-jsf-2-and-html5-server-sent-events-104548.html"
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee47e"
    },
    "description": "",
    "question": "В\n чём различия между Long-Polling, Websockets и Server-Sent Events?",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "UnabASaTYucvVPyMNeX2",
    "question": "Задача:\n «Расплющивание» массива.",
    "popularity": null,
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b7"
    },
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "Необходимо\n написать функцию, принимающую в аргументах многомерный массив неограниченной\n вложенности и возвращающую новый одномерный массив, состоящий из элементов со\n всех уровней вложенности исходного массива. <br>\n Например: <br>\n flat([1, [2, [3, [4,5]]]]); // =&gt; [1, 2, 3, 4, 5] <br>\n function flat(arr) { <br>\n let res = []; <br>\n arr.forEach((item) =&gt; { <br>\n if (Array.isArray(item)) { <br>\n res = res.concat(flat(item)); <br>\n } else { <br>\n res.push(item); <br>\n } <br>\n }); <br>\n return res; <br>\n } <br>\n Есть нативный метод — Array.prototype.flat <br>\n Я считаю, что именно с него надо начать ответ на этот вопрос, и только\n когда (именно когда, а не если) интервьюер скажет, что такое решение ему не\n подходит и нужно всё сделать руками, приниматься за вышеупомянутое решение\n через рекурсию. <br>\n [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]].flat(Infinity); <br>\n "
      ],
      "code": [],
      "link": []
    },
    "type": "question"
  },
  {
    "id": "VIK0KX8Q1CwLcOENLY0u",
    "answer": {
      "text": [
        "Особенности\n SEO-оптимизации мультиязычных ресурсов <br>\n переключение языка <br>\n домены поддомены и т.д. <br>\n "
      ],
      "code": [],
      "link": []
    },
    "type": "question",
    "description": "",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee469"
    },
    "question": "На\n что необходимо обратить внимание при разработке мультиязычных сайтов?"
  },
  {
    "id": "VWapaAyfOMLCU5w44XAg",
    "type": "question",
    "question": "Сортировка\n пузырьком.",
    "difficulty": "junior",
    "answer": {
      "text": [
        "var\n m = [1, 7, 5, 13, 8], <br>\n count = m.length - 1, <br>\n max; <br>\n for (var i = 0; i &lt; count; i++) { <br>\n for (var j = 0; j &lt; count - i; j++) { <br>\n if (m[j] &gt; m[j + 1]) { <br>\n max = m[j]; <br>\n m[j] = m[j + 1]; <br>\n m[j + 1] = max; <br>\n } <br>\n } <br>\n } <br>\n "
      ],
      "link": [],
      "code": []
    },
    "description": "",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a3"
    },
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "VsLryjhw5GhFf8xnDzly",
    "type": "question",
    "question": "Что\n вы думаете о AMD против CommonJS?",
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Asynchronous\n Module Definition или AMD <br>\n //Вызов функции define с массивом зависимостей и фабричной функцией <br>\n define(['dep1', 'dep2'], function (dep1, dep2) { <br>\n <br>\n //Определение модуля с помощью возвращаемого значения <br>\n return function () {}; <br>\n }); <br>\n CommonJS <br>\n Формат CommonJS применяется в Node.js и использует для определения\n зависимостей и модулей require и module.exports: <br>\n <br>\n var dep1 = require('./dep1'); <br>\n var dep2 = require('./dep2'); <br>\n <br>\n module.exports = function(){ <br>\n // ... <br>\n } <br>\n "
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee47a"
    },
    "description": "",
    "difficulty": "junior",
    "popularity": null
  },
  {
    "id": "WFjL8rcGHJpVMEG8TYaY",
    "description": "",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee497"
    },
    "question": "Вообще\n вопросы на setTimeout и setInterval весьма актуальны.Меня спрашивали: «Какое\n минимальное время можно задать?»",
    "difficulty": "junior",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "В\n каждом браузере есть свой минимум, если вы указываете меньше него, то все\n равно задержка будет не меньше минимуму. Иногда даже и больше указанного\n времени, так как задача попадает в очередь и время складывается из заданного\n плюс затраты в на выполнение на задач в очереди перед ней.<br>\n Не давно выделили целую статью для этого примера(тут), читатели в\n комментариях расписывали всевозможные способы решения, от традиционных до\n фантастических. Вот о которых я обычно рассказывала на собеседованиях. <br>\n for (var i = 0; i &lt; 10; i++) { <br>\n setTimeout(function () { <br>\n console.log(i); <br>\n }, 100); <br>\n } <br>\n Что будет выведено в консоль, как можно модифицировать пример что бы он\n возвращал правильный результат(назовите как можно больше способов)? <br>\n for (var i = 0; i &lt; 10; i++) { <br>\n (function (i) { <br>\n setTimeout(function () { <br>\n console.log(i); <br>\n }, 100); <br>\n })(i) <br>\n } <br>\n es6 <br>\n for (let i = 0; i &lt; 10; i++) { <br>\n setTimeout(function () { <br>\n console.log(i); <br>\n }, 100); <br>\n } <br>\n "
      ]
    },
    "popularity": null
  },
  {
    "id": "WNryGHLapTlPcip1CXIX",
    "question": "Объясните,\n почему это не является IIFE: `function foo(){ }();`. Что необходимо изменить,\n чтобы это стало IIFE??",
    "_id": {
      "$oid": "60de0704e2c8c53194aee434"
    },
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "link": [
        "http://lucybain.com/blog/2014/immediately-invoked-function-expression/",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void"
      ],
      "text": [
        "IIFE\n расшифровывается как Immediately Invoked Function Expression — немедленно\n вызываемое функциональное выражение. Синтаксический анализатор JavaScript\n читает function foo(){ } (); как function foo(){ } и ();, где первое\n выражение — это объявление функции, а второе (пара скобок) — попытка вызова\n функции, но так как имя не указано, он выдает ошибку Uncaught SyntaxError:\n Unexpected token.<br>\n Вот два способа исправить это, которые заключаются добавление\n дополнительных скобок: (function foo(){ })() и (function foo(){ }()).\n Выражения, начинающиеся с function, считаются объявлениями функций.\n Оборачивая эту функцию внутри (), она становится функциональным выражением,\n которое затем может быть выполнено с последующим (). Подобные функции не\n отображаются в глобальной области видимости, и вы можете даже не указывать им\n имя, если вы не будете на них ссылаться.<br>\n Вы также можете использовать оператор void — void function foo(){ }(). К\n сожалению, с таким подходом есть одна проблема. Выполнение данного выражения\n всегда возвращает undefined, поэтому, если ваше IIFE возвращает что-либо, вы\n не можете его использовать. Пример: <br>\n const foo = void function bar() { return ‘foo’; }(); <br>\n console.log(foo); // undefined <br>\n "
      ]
    },
    "popularity": "5",
    "difficulty": "junior",
    "description": "",
    "type": "question"
  },
  {
    "id": "WQwbUHRepRXAfn9xNahh",
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ee"
    },
    "type": null,
    "competence": [],
    "difficulty": null,
    "description": "",
    "question": "run-to-completion\n model",
    "popularity": null
  },
  {
    "id": "WX2pmUi8XHMnQbbHjTPQ",
    "description": "",
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e1"
    },
    "difficulty": null,
    "question": "service\n worker",
    "type": null,
    "popularity": null,
    "competence": []
  },
  {
    "id": "WYydSIPgp5WmYWLYkUyk",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "type": null,
    "competence": [],
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee513"
    },
    "description": "",
    "difficulty": null,
    "question": "Прототипы\n и прототипное наследование"
  },
  {
    "id": "Wgasyfk7YnSpOLtE1Sx8",
    "type": "question",
    "difficulty": "junior",
    "description": "",
    "competence": [
      "javascript"
    ],
    "question": "Для\n чего используются статические члены класса?",
    "answer": {
      "link": [
        "https://stackoverflow.com/questions/21155438/when-to-use-static-variables-methods-and-when-to-use-instance-variables-methods"
      ],
      "code": [],
      "text": [
        "Члены\n статических классов (свойства/методы) не привязаны к конкретному экземпляру\n класса и имеют одинаковое значение вне зависимости от того, какой экземпляр\n ссылается на них. Статические свойства обычно являются конфигурационными\n переменными, а статические методы обычно являются чисто служебными функциями,\n которые не зависят от состояния экземпляра."
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee462"
    },
    "popularity": null
  },
  {
    "id": "Ww5uR6yI6DwW8eTrhGjN",
    "competence": [
      "javascript",
      "html",
      "css"
    ],
    "difficulty": "junior",
    "popularity": "3",
    "answer": {
      "link": [],
      "text": [
        "При нажатии на блок и получении эвента эта информация хранится в window.event"
      ],
      "code": [
        "let onkeydown = (function (ev) {\n  var key;\n  var isShift;\n  if (window.event) {\n    key = window.event.keyCode;\n    isShift = !!window.event.shiftKey; // typecast to boolean\n  } else {\n    key = ev.which;\n    isShift = !!ev.shiftKey;\n  }\n  if ( isShift ) {\n    switch (key) {\n      case 16: // ignore shift key\n        break;\n      default:\n        alert(key);\n        // do stuff here?\n        break;\n    }\n  }\n});"
      ]
    },
    "description": "shift alt ",
    "question": "Как определить нажат ли shift или alt при щелчке на элемент?",
    "type": "question"
  },
  {
    "id": "XCa3SCIWkZrjlLXwYtFM",
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee51e"
    },
    "difficulty": null,
    "description": "",
    "question": "Зачем\n нужен use strict",
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "competence": [],
    "popularity": null
  },
  {
    "id": "XcRb3oIp67RTnu3s9bou",
    "difficulty": "middle",
    "_id": {
      "$oid": "60de0704e2c8c53194aee433"
    },
    "popularity": "5",
    "question": "Что\n вы думаете о AMD против CommonJS?",
    "type": "question",
    "competence": [
      "javascript",
      "typescript"
    ],
    "answer": {
      "code": [],
      "text": [
        "Оба\n являются способами реализации системы модулей, которая изначально не\n присутствовала в JavaScript до появления ES2015. CommonJS является\n синхронным, в то время как AMD (Asynchronous Module Definition, асинхронное\n определение модуля) — соответственно, асинхронным. CommonJS разработан с\n учетом разработки на стороне сервера, в то время как AMD с поддержкой\n асинхронной загрузки модулей больше предназначена для браузеров.<br>\n Я считаю синтаксис AMD довольно многословным, а CommonJS ближе к стилю,\n который используется в выражениях импорта в других языках. В большинстве\n случаев я считаю AMD ненужным, потому что если вы разместите весь свой код в\n одном объединенном файле, то вы не сможете воспользоваться свойствами\n асинхронной загрузки. Кроме того, синтаксис CommonJS ближе к стилю написания\n модулей Node, и поэтому происходит меньше путаницы при переключении между\n клиентской и серверной разработкой на JavaScript.<br>\n Я рад, что с появлением модулей ES2015, которые поддерживают как\n синхронную, так и асинхронную загрузку, мы, наконец, можем придерживаться\n одного подхода. Несмотря на то, что они не полностью поддерживаются во всех\n браузерах и Node, мы можем использовать транспайлеры для преобразования\n нашего кода."
      ],
      "link": [
        "https://auth0.com/blog/javascript-module-systems-showdown/",
        "https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs"
      ]
    },
    "description": ""
  },
  {
    "id": "Xf8FEbaV4AThhZz3ah0U",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Уменьшите\n размер страниц сайта Слишком «тяжелый» контент долго загружается. ... <br>\n Снизьте «вес» графики ... <br>\n Упростите код JavaScript и CSS. ... <br>\n Уменьшите число запросов браузера ... <br>\n Сократите расстояние между сайтом и пользователями <br>\n <br>\n FOUC <br>\n Flash of unstyled content"
      ]
    },
    "difficulty": "junior",
    "question": "Как\n можно оптимизировать загрузку внешних ресурсов на странице?",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee464"
    }
  },
  {
    "id": "XpP7FIlYR1Od177wi3Or",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c8"
    },
    "question": "Напишите\n простую функцию, чтобы узнать равен ли один из входных параметров 3.",
    "description": "",
    "popularity": null,
    "type": "question",
    "answer": {
      "code": [],
      "text": [
        "Тут\n делается упор на проверку знаний об arguments, но иногда заходят ещё дальше и\n просят рассказать каким образом работает\n Array.prototype.slice.call(arguments). <br>\n Ответ: <br>\n function isThreePassed(){ <br>\n const args = Array.prototype.slice.call(arguments); <br>\n return args.indexOf(3) != -1; <br>\n } <br>\n isThreePassed(1,2) //false <br>\n isThreePassed(9,3,4,9) //true <br>\n Как мы знаем, arguments не массив, а обычный объект, поэтому у него нет\n такого полезного метода как indexOf. Для этого используется\n Array.prototype.slice.call(arguments), который делает из argument — &gt;\n array. <br>\n .call() и .apply() позволяют явно установить this в функции. И если\n передать argument как this, то slice будет работать с ним как с обычным массивом.\n <br>\n А вот интересный эксперимент: <br>\n const o = { <br>\n '0': 'zero', <br>\n '1': 'one' <br>\n }; <br>\n [].slice.call(o); // []; <br>\n const oo = { <br>\n '0': 'zero', <br>\n '1': 'one', <br>\n length: 2 <br>\n }; <br>\n [].slice.call(oo); // [\"zero\", \"one\"]; <br>\n "
      ],
      "link": []
    }
  },
  {
    "id": "Xu6eYCpTWqAJfO7CG0y6",
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "difficulty": null,
    "popularity": null,
    "question": "Inline\n caches",
    "type": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ff"
    }
  },
  {
    "id": "XveGPjVwrTQWsnKM3WOl",
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee495"
    },
    "answer": {
      "code": [],
      "text": [
        "нет"
      ],
      "link": []
    },
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "popularity": null,
    "question": "У\n нас есть три запроса к серверу, один возвращает нам имя пользователя, второй\n его данные, а третий изображение для аватарки, мы для каждого запроса\n используем по промису, объединяя их в цепочку, что будет если в одном из\n запросов произойдет ошибка, довыполнится ли цепочка?",
    "type": "question"
  },
  {
    "id": "Y6frOvSNhI909hurbqh6",
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee498"
    },
    "description": "",
    "type": "question",
    "question": "Надо\n написать функцию, которая вернет «hello world», но при этом в теле функции\n нельзя использовать ни цифры, ни буквы, а циклы, массивы, объекты можно, но\n без цифр."
  },
  {
    "id": "YBcCK2OYgvctae57UV2V",
    "type": "question",
    "question": "В\n чем разница между событием `load` и событием `DOMContentLoaded`?",
    "answer": {
      "text": [
        "Событие\n DOMContentLoaded вызывается, когда исходный HTML-документ полностью загружен\n и обработан, не дожидаясь окончания загрузки таблиц стилей, изображений и\n скриптов. <br>\n Событие load происходит только после загрузки DOM и всех зависимых\n ресурсов. <br>\n "
      ],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded",
        "https://developer.mozilla.org/en-US/docs/Web/Events/load"
      ],
      "code": []
    },
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee447"
    },
    "description": "",
    "popularity": null
  },
  {
    "id": "YEi4lssbwoXnDN7a8iHG",
    "answer": {
      "code": [],
      "text": [
        "Однако\n есть два новых атрибута — srcset and sizes — позволяющих добавить\n дополнительные изображения с пометками, чтобы браузер выбрал подходящее.\n <br>\n &lt;img srcset=\"elva-fairy-320w.jpg 320w, <br>\n elva-fairy-480w.jpg 480w, <br>\n elva-fairy-800w.jpg 800w\" <br>\n sizes=\"(max-width: 320px) 280px, <br>\n (max-width: 480px) 440px, <br>\n 800px\" <br>\n src=\"elva-fairy-800w.jpg\" alt=\"Elva dressed as a\n fairy\"&gt; <br>\n "
      ],
      "link": []
    },
    "difficulty": "junior",
    "type": "question",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "question": "Для\n чего используется атрибут srcset в теге изображения? Опишите процесс, который\n использует браузер при оценке содержимого этого атрибута.",
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee470"
    }
  },
  {
    "id": "YJbnA0B81yan73vwuF1f",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee457"
    },
    "type": "question",
    "description": "",
    "difficulty": "junior",
    "question": "Объясните\n разницу при использовании `foo` в `function foo() {}` и `var foo = function()\n {}`",
    "answer": {
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function"
      ],
      "code": [],
      "text": [
        "Первое\n — объявление функции, а второе — функциональное выражение. Ключевое отличие\n состоит в том, что тело функции при объявлении поднимается наверх, а тело\n функциональных выражений — нет (они имеют такое же поведение поднятия, что и\n переменные). Для получения более подробной информации, обратитесь к вопросу\n выше о поднятии. Если вы попытаетесь вызвать выражение функции до того, как\n оно будет определено, вы получите ошибку Uncaught TypeError: XXX is not a\n function. <br>\n Объявление функции <br>\n foo(); // 'FOOOOO' <br>\n function foo() { <br>\n console.log('FOOOOO'); <br>\n } <br>\n Функциональное выражение <br>\n foo(); // Uncaught TypeError: foo is not a function <br>\n var foo = function() { <br>\n console.log('FOOOOO'); <br>\n };"
      ]
    },
    "popularity": null
  },
  {
    "id": "YNlFSfIcpydHvv4cqJS4",
    "difficulty": "beginner",
    "answer": {
      "code": [],
      "text": [
        "чтобы работал position: absolute надо чтобы парент был в position: relative"
      ],
      "link": []
    },
    "description": "Абсолютное позиционирование",
    "popularity": "4",
    "question": "Как сделать, чтобы работал position:absolute ?",
    "competence": [
      "css"
    ],
    "type": "question"
  },
  {
    "id": "YTjeq3XdngVd4X0dnOOa",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee43e"
    },
    "competence": [
      "typescript"
    ],
    "question": "В\n каких случаях используется `document.write()`?",
    "answer": {
      "code": [],
      "link": [
        "https://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html",
        "https://github.com/h5bp/html5-boilerplate/wiki/Script-Loading-Techniques#documentwrite-script-tag"
      ],
      "text": [
        "document.write()\n записывает строку текста в поток документа, открытого при помощи\n document.open(). Когда document.write() выполняется после загрузки страницы,\n он вызывает document.open, который очищает весь документ\n (&lt;head&gt;и&lt;body&gt; будут удалены!) и заменяет содержимое на заданное\n значение параметра. Подобный подход считается опасным и не рекомендуется его\n использовать. <br>\n В Интернете есть несколько ответов, которые объясняют, что document.write()\n используется в коде отслеживания или когда вы хотите добавить стили, которые\n должны работать только при включенном JavaScript. Он даже используется в\n шаблоне HTML5 для параллельной загрузки скриптов и сохранения порядка\n выполнения! Тем не менее, я подозреваю, что эти причины могут быть устаревшими,\n и в наши дни они могут быть достигнуты без использования document.write().\n Пожалуйста, поправьте меня, если я ошибаюсь по этому поводу."
      ]
    },
    "type": "question",
    "description": "",
    "popularity": "3"
  },
  {
    "id": "YZx5Im7LiUTnEKSpL0vp",
    "type": "question",
    "competence": [
      "javascript",
      "typescript",
      "frontend"
    ],
    "question": "Какая очередности написания тестов функций в jest?",
    "popularity": "5",
    "answer": {
      "text": [
        "jest test => describe(test(expect()))"
      ],
      "code": [],
      "link": []
    },
    "description": "Порядок, обертки, jest",
    "difficulty": "senior"
  },
  {
    "id": "Z2NpvdP0neb1fvYhhEqf",
    "difficulty": null,
    "question": "block\n scope",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4de"
    },
    "competence": [],
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "description": "",
    "popularity": null,
    "type": null
  },
  {
    "id": "Z5m64K7GZVSkPBZcNXtD",
    "description": "",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee43a"
    },
    "answer": {
      "link": [
        "https://stackoverflow.com/questions/7614317/what-is-the-difference-between-native-objects-and-host-objects"
      ],
      "text": [
        "В\n чем разница между host-объектами и нативными объектами? <br>\n Нативные объекты — это объекты, которые являются частью языка JavaScript,\n определенного в спецификации ECMAScript, такие как String, Math, RegExp,\n Object, Function и т.д. <br>\n Хост-объекты предоставляются средой выполнения (браузером или Node), такие\n как `window`, `XMLHTTPRequest` и т.д. <br>\n "
      ],
      "code": []
    },
    "competence": [
      "typescript"
    ],
    "popularity": "4",
    "difficulty": "junior",
    "question": "В\n чем разница между host-объектами и нативными объектами?"
  },
  {
    "id": "ZKpgl7O5FgWlGDAvkOSp",
    "question": "global\n scope",
    "description": "",
    "popularity": null,
    "type": null,
    "difficulty": null,
    "competence": [],
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4dc"
    }
  },
  {
    "id": "ZZoezCwPkb44QGkK6NGY",
    "type": "question",
    "description": "Performance ",
    "question": "Как использовать Performance в консоли браузера и зачем он нужен?",
    "popularity": "4",
    "answer": {
      "link": [],
      "text": [
        "Записывает все действия и насколько они нагружают систему. Служит для оптимизации."
      ],
      "code": []
    },
    "competence": [
      "common questions",
      "javascript"
    ],
    "difficulty": "junior"
  },
  {
    "id": "ZfFB49EfJ3wmeYAB11ox",
    "question": "Реализовать\n аналог Promise.all.",
    "answer": {
      "text": [
        "function\n promiseAll(promises) { <br>\n return new Promise((resolve, reject) =&gt; { <br>\n const results = []; <br>\n let resolvedCount = 0; <br>\n <br>\n promises.forEach((promise, index) =&gt; { <br>\n promise <br>\n .then((result) =&gt; { <br>\n results[index] = result; <br>\n <br>\n resolvedCount++; <br>\n <br>\n if (resolvedCount === promises.length) { <br>\n resolve(results); <br>\n } <br>\n }) <br>\n .catch((err) =&gt; reject(err)); <br>\n }); <br>\n }); <br>\n }"
      ],
      "code": [],
      "link": []
    },
    "difficulty": "junior",
    "description": "",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b1"
    },
    "type": "question",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "ZhEUysYfQXzUyGV2RZWx",
    "competence": [],
    "question": "Блочная\n область видимости, функциональная",
    "type": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee50f"
    },
    "popularity": null,
    "difficulty": null,
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "description": ""
  },
  {
    "id": "ZpzCEjbkhLvGtuxegn8u",
    "answer": {
      "text": [
        "1\n минимизировать и склеить в один все js-файлы <br>\n 2 то же и с css <br>\n 3 собрать изображения в спрайты <br>\n 4 кеширование <br>\n а) файлы js и css кешируются навсегда( или на длительный период, к примеру\n на год), когда в них вносятся какие-то изменения, в результате разработки,\n меняется номер версии, браузер считает, что это новые файлы и закачивает их.\n Время кеширование содержится в заголовке expires. <br>\n б) файл кешируется до тех пор, пока в нем не произошли изменения. Когда\n пользователь в первый раз заходит на сайт, у него еще нет кеша, файлы\n закачиваются и в следующий раз, когда происходит обмен заголовками происходит\n анализ ETag(хеш суммы содержимого содержимого файла или хеш последнего\n времени изменения, или номер версии) Если он изменился, то закачивается, в\n противном случае, берется из хеша. <br>\n Так же можно брать заголовки с датой последней модификации(Last_Modifed),\n но это менее надежно. <br>\n в) можно сжать данные перед отправкой, решается настройкой конфига в nginx.\n Пример. Content-Encoding: gzip <br>\n г) можно разбить js на модули и на разных страницах подключать по мере\n необходимости."
      ],
      "link": [],
      "code": []
    },
    "popularity": null,
    "difficulty": "junior",
    "description": "",
    "competence": [
      "javascript"
    ],
    "question": "Ускорение\n загрузки страницы.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a1"
    },
    "type": "question"
  },
  {
    "id": "aKrG2dSTvtNfcr3XwByE",
    "description": "",
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee525"
    },
    "question": "Как\n мы можем эмулировать модули не используя ES modules/require",
    "difficulty": null,
    "type": null,
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "popularity": null
  },
  {
    "id": "aMEmlUXXtsD0FhPIx62Z",
    "_id": {
      "$oid": "60de0704e2c8c53194aee443"
    },
    "description": "",
    "difficulty": "junior",
    "popularity": null,
    "answer": {
      "link": [],
      "text": [
        "Да.\n Handlebars, Underscore, Lodash, AngularJS, и JSX. Мне не нравилась\n шаблонизация в AngularJS, потому что там активно использовались строки в\n директивах и легко допустить ошибку при опечатке. JSX - мой новый фаворит,\n так как он ближе к JavaScript и почти не имеет дополнительного синтаксиса. В\n настоящее время вы даже можете использовать строковые литералы шаблонов\n ES2015 в качестве быстрого способа создания шаблонов, не полагаясь на\n сторонний код. <br>\n const template = `&lt;div&gt;My name is: ${name}&lt;/div&gt;`; <br>\n Однако следует помнить о возможном XSS в вышеприведенном подходе, поскольку\n содержимое не экранируется, в отличие от библиотек шаблонизации."
      ],
      "code": []
    },
    "competence": [
      "typescript"
    ],
    "type": "question",
    "question": "Вы\n когда-нибудь использовали шаблонизацию на JavaScript? Если да, то какие\n библиотеки вы использовали?"
  },
  {
    "id": "aQcU4eB1x1sj4BMLdeoY",
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "window.location.href\n <br>\n Как отмечено в комментариях, строка ниже работает, но она содержит ошибки\n для Firefox. <br>\n document.URL; <br>\n "
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4cc"
    },
    "difficulty": "junior",
    "popularity": null,
    "question": "Как\n получить параметры из URL’а текущего окна?",
    "type": "question",
    "description": ""
  },
  {
    "id": "afqu7q3fcYHlmhdxMGS8",
    "_id": {
      "$oid": "60de0704e2c8c53194aee48f"
    },
    "answer": {
      "link": [],
      "text": [
        "Многим\n тегам стили прописаны по умолчанию, в процессе верстке нам приходится\n переопределять их. Что бы не делать это каждый раз, мы «скидываем» их\n «массово». Для этого заводим файл под стили, подключаем его первым или в\n первом стилевом файле, в самом верху указываем наши стили для базовых тегов.\n <br>\n К примеру. Мы часто используем список ul для верстки меню, для этого мы\n каждый раз вынуждены обнулять padding, margin и list-style-type. Можно один\n раз задать стили, и списки станут без внешней и внутренней границы, а так же\n без маркеров. <br>\n "
      ],
      "code": []
    },
    "question": "Что\n такое ресет стилей?",
    "description": "",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "type": "question",
    "difficulty": "junior"
  },
  {
    "id": "b10OcxRi0wgeFDXEAP74",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee453"
    },
    "popularity": null,
    "description": "",
    "question": "Каковы\n преимущества и недостатки написания JavaScript-кода на языке, который\n компилируется в JavaScript?",
    "answer": {
      "link": [
        "https://softwareengineering.stackexchange.com/questions/72569/what-are-the-pros-and-cons-of-coffeescript"
      ],
      "text": [
        "Вот\n несколько языков, которые компилируются в JavaScript: CoffeeScript, Elm,\n ClojureScript, PureScript и TypeScript. <br>\n Преимущества: <br>\n Исправляют некоторые давние проблемы в JavaScript и препятствует\n использованию анти-паттернов в JavaScript. <br>\n Позволяют писать более короткий код, предоставляя синтаксический сахар\n поверх JavaScript, которого, как мне кажется, не хватало в ES5, но с приходом\n ES2015 все изменилось. <br>\n Статическая типизация идеальна (в случае TypeScript) для больших проектов,\n которые необходимо поддерживать с течением времени. <br>\n Недостатки: <br>\n Необходима сборка/компиляция кода, так как браузеры запускают только\n JavaScript, и ваш код должен быть скомпилирован в JavaScript перед тем, как\n он будет передан в браузеры. <br>\n Отладка может быть трудной, если карты кода (source maps) плохо\n сопоставляются с исходным кодом. <br>\n Большинство разработчиков не знакомы с этими языками и должны будут изучить\n их. Если ваша команда будет использовать их для своих проектов, это приведет\n к увеличению затрат. <br>\n Меньшее сообщество (зависит от языка), что означает, что будет труднее\n найти ресурсы, учебные пособия, библиотеки и инструменты. <br>\n Может отсутствовать поддержка в IDE/редакторе. <br>\n Эти языки всегда будут позади последнего стандарта JavaScript. <br>\n Разработчики должны знать, во что компилируется их код — потому что это то,\n что будет запускаться в браузере, и это наиболее важно. <br>\n По большому счету, ES2015 значительно улучшил JavaScript и сделал\n разработку на нем намного удобнее. Я не вижу причин использовать CoffeeScript\n в наши дни."
      ],
      "code": []
    },
    "difficulty": "junior"
  },
  {
    "id": "bW3Aa4QbC6vTf8QWILak",
    "difficulty": "middle",
    "type": "question",
    "popularity": "4",
    "question": "Для чего используется метод .fill(\"\")?",
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"
      ],
      "text": [
        "Заполняет там как-то матрицу и т.д."
      ]
    },
    "description": "Очень интересный метод в js"
  },
  {
    "id": "cCSDpoNw5Aq9HsJokfvo",
    "difficulty": "junior",
    "question": "var\n foo = {}; <br>\n foo.bar = 'hello'; <br>\n Вопрос: Чему равно foo.length? <br>\n ",
    "popularity": null,
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ce"
    },
    "description": "",
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "Ответ:\n undefined"
      ],
      "code": [],
      "link": []
    }
  },
  {
    "id": "cDMLvv0UTZ4wQD4kdEg1",
    "type": null,
    "description": "",
    "popularity": null,
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "competence": [],
    "question": "Очереди",
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f8"
    }
  },
  {
    "id": "cJLCRpQMlePmmVnvXstv",
    "question": "Чему\n равно foo.length?",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee487"
    },
    "description": "",
    "type": "question",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "var\n foo = []; <br>\n foo.push(1); <br>\n foo.push(2); <br>\n "
      ]
    },
    "difficulty": "junior",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "cNzBEL9rTgXBU9MKBUJa",
    "difficulty": null,
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e7"
    },
    "question": "interpreter",
    "competence": [],
    "type": null,
    "popularity": null,
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    }
  },
  {
    "id": "ctWOJraQWirvFeNvKjkN",
    "_id": {
      "$oid": "60de0704e2c8c53194aee50c"
    },
    "description": "",
    "popularity": null,
    "competence": [],
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "difficulty": null,
    "question": "Логические\n операторы",
    "type": null
  },
  {
    "id": "dEGmPez38M6jlhnseqLy",
    "popularity": null,
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "question": "В\n чем разница между function expression и function declaration",
    "type": null,
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee518"
    },
    "competence": [],
    "description": ""
  },
  {
    "id": "dJqOteNwiJ3R8HaIeeLh",
    "_id": {
      "$oid": "60de0704e2c8c53194aee449"
    },
    "description": "",
    "answer": {
      "text": [
        "Same-origin\n policy (принцип одинакового источника) не позволяет JavaScript выполнять\n запросы за границы домена. Источник определяется как комбинация схемы URI,\n имени хоста и номера порта. Этот принцип не позволяет вредоносному сценарию\n на одной странице получить доступ к конфиденциальным данным на другой через\n объектную модель документа этой страницы."
      ],
      "link": [
        "https://en.wikipedia.org/wiki/Same-origin_policy"
      ],
      "code": []
    },
    "question": "Объясните\n same-origin policy в контексте JavaScript",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "difficulty": "junior"
  },
  {
    "id": "dPDSwD5hUUjVMBLGcCqY",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "function\n f(a, b) { <br>\n if (b !== undefined) { <br>\n return a + b; <br>\n } else { <br>\n return function (b) { <br>\n return a + b; <br>\n } <br>\n } <br>\n } <br>\n <br>\n f(1)(2)(3)() -&gt; 6, f(0)(3)(1)(5)() -&gt; 8 <br>\n function f(arg) { <br>\n var value = arg; <br>\n <br>\n return function (arg) { <br>\n if (arg !== undefined) { <br>\n return f(value + arg); <br>\n } else { <br>\n return value; <br>\n } <br>\n } <br>\n } <br>\n <br>\n foo(1)(2)(3) -&gt; 6 <br>\n function foo(value) { <br>\n var acc = value; <br>\n function addNext(next) { <br>\n acc += next; <br>\n return addNext; <br>\n } <br>\n addNext.toString = addNext.valueOf = function() { <br>\n return acc; <br>\n } <br>\n return addNext; <br>\n }"
      ]
    },
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee49e"
    },
    "description": "",
    "question": "Реализовать\n функцию f: f(2, 3) -&gt; 5, при вызове f(2)(3), тоже вернет 5",
    "difficulty": "junior"
  },
  {
    "id": "dddhyHmaVahewS2e5HKD",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4bd"
    },
    "description": "",
    "type": "question",
    "question": "Задача:\n Бомба",
    "answer": {
      "text": [
        "Надо\n реализовать «бомбу» (в виде функции-конструктора), которая получает на входе\n время, через которое взорвется и некоторый «звук взрыва» (строку, которую\n вернет через заданное время). С фантазией задача. <br>\n function Bomb(message, delay) { <br>\n this.message = message; <br>\n setTimeout(this.blowUp.bind(this), delay * 1000); // взрываем через delay\n sec <br>\n } <br>\n Bomb.prototype.blowUp = function () { <br>\n console.log(this.message); <br>\n }; <br>\n new Bomb(\"Explosion!\", .5); <br>\n "
      ],
      "link": [],
      "code": []
    },
    "difficulty": "junior",
    "popularity": null,
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "e6hs9rqEGcHT8xdsAw9H",
    "difficulty": "junior",
    "answer": {
      "text": [
        "По\n старинке, вводили переменную-счетчик и как-только наступало окончание\n очередного асинхронного действия, сравнивали переменную с общем количеством."
      ],
      "link": [],
      "code": []
    },
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee494"
    },
    "competence": [
      "javascript"
    ],
    "question": "И\n конечно вопрос на засыпку: «Каким образом можно обойтись без промисов?».",
    "description": "",
    "popularity": null
  },
  {
    "id": "e9ro78D0jT8BUcHqLkq6",
    "question": "Задача:\n Уникализация значений в массиве.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b6"
    },
    "difficulty": "junior",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "description": "",
    "popularity": null,
    "answer": {
      "text": [
        "Необходимо\n написать функцию, принимающую в аргументах массив целых чисел и возвращающую\n новый массив, состоящий только из уникальных значений первого массива. <br>\n Например: <br>\n unique([1, 1, 2, 2, 4, 2, 3, 7, 3]); // =&gt; [1, 2, 4, 3, 7] <br>\n Решение в лоб <br>\n function unique(arr) { <br>\n const res = []; <br>\n arr.forEach((item) =&gt; { <br>\n if (res.indexOf(item) === -1) { <br>\n res.push(item); <br>\n } <br>\n }); <br>\n return res; <br>\n } <br>\n Ожидания интервьюера <br>\n function unique(arr) { <br>\n const res = {}; <br>\n arr.forEach((item) =&gt; { <br>\n res[item] = ''; <br>\n }); <br>\n return Object.keys(res).map(item =&gt; Number(item)); <br>\n } <br>\n <br>\n Решение в одну строку <br>\n function unique(arr) { <br>\n return arr.filter((item, index, self) =&gt; (self.indexOf(item) ===\n index)); <br>\n }"
      ],
      "code": [],
      "link": []
    }
  },
  {
    "id": "eWNLFepOhJPX1dDa53gM",
    "type": "question",
    "difficulty": "junior",
    "popularity": "3",
    "description": "insertAdjacentHTML",
    "answer": {
      "text": [
        "element.insertAdjacentHTML(position, text);\ninsertAdjacentHTML ('afterbegin', 'afterend', 'beforeend', 'beforebegin')"
      ],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML"
      ],
      "code": [
        "const insert = document.querySelector('#insert');\ninsert.addEventListener('click', () => {\n  const subject = document.querySelector('#subject');\n  const positionSelect = document.querySelector('#position');\n  subject.insertAdjacentHTML(positionSelect.value, '<strong>inserted text</strong>');\n});\n\nconst reset = document.querySelector('#reset');\nreset.addEventListener('click', () => {\n  document.location.reload();\n});"
      ]
    },
    "competence": [
      "javascript"
    ],
    "question": "Что такое insertAdjacentHTML?"
  },
  {
    "id": "ejiNxIeYxixPueXnnYcy",
    "description": "",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee436"
    },
    "answer": {
      "code": [],
      "text": [
        "Замыкание\n — это комбинация функции и лексического окружения, в которой эта функция была\n объявлена. Слово “лексический” относится к тому факту, что лексическая\n область видимости использует место, где переменная объявлена в исходном коде,\n чтобы определить, где эта переменная доступна. Замыкания — это функции,\n которые имеют доступ к переменным внешней (замыкающей) функции — цепочке\n областей видимости даже после того, как внешняя функция вернулась.<br>\n Для чего его используют? <br>\n Конфиденциальность данных / эмуляция скрытых методов при помощи замыканий.\n Обычно используется в модульном паттерне. <br>\n Частичное применение функций или каррирование. <br>\n "
      ],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures",
        "https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36"
      ]
    },
    "popularity": "4",
    "question": "Что\n такое замыкание и как/для чего его используют?",
    "type": "question"
  },
  {
    "id": "emRK3e7MI8LCj0Mbaz4m",
    "question": "На\n собесе на прошлую работу мне попался вопрос: 'Что такое live/die'",
    "type": "question",
    "difficulty": "junior",
    "answer": {
      "link": [],
      "text": [
        "Где\n то из глубины сознания всплыло, что это аналог on/off, с помощью них можно\n навешивать/удалять обработчики на события их. Но более старые методы, по\n сравнению on/off. <br>\n В проекте я столкнулась с еще и с bind/unbind <br>\n "
      ],
      "code": []
    },
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee49f"
    }
  },
  {
    "id": "enAJmMeGp96TLghWYeAE",
    "competence": [
      "javascript"
    ],
    "description": "",
    "popularity": null,
    "question": "Написать\n полифилл для Promise.",
    "answer": {
      "link": [],
      "text": [
        "function\n Promise(fn) { <br>\n this.thenHandlers = []; <br>\n this.catchHandlers = []; <br>\n this.isResolved = false; <br>\n this.isRejected = false; <br>\n setTimeout(() =&gt; fn(this.applyResolve.bind(this),\n this.applyReject.bind(this))); <br>\n } <br>\n Promise.prototype = { <br>\n applyResolve: function () { <br>\n this.thenHandlers.forEach((handler) =&gt; handler()); <br>\n this.isResolved = true; <br>\n }, <br>\n applyReject: function () { <br>\n this.catchHandlers.forEach((handler) =&gt; handler()); <br>\n this.isRejected = true; <br>\n }, <br>\n then: function (handler) { <br>\n if (this.isResolved) { <br>\n handler(); <br>\n } else { <br>\n this.thenHandlers.push(handler); <br>\n } <br>\n return this; <br>\n }, <br>\n catch: function (handler) { <br>\n if (this.isRejected) { <br>\n handler(); <br>\n } else { <br>\n this.catchHandlers.push(handler); <br>\n } <br>\n return this; <br>\n } <br>\n <br>\n }; <br>\n const p = new Promise((resolve, reject) =&gt; ( <br>\n Math.round(Math.random() * 10) % 2 === 0 <br>\n ? resolve() <br>\n : reject() <br>\n )); <br>\n p <br>\n .then(function () { <br>\n console.log('resolved'); <br>\n }) <br>\n .catch(function () { <br>\n console.log('rejected'); <br>\n }); <br>\n "
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b0"
    },
    "difficulty": "junior",
    "type": "question"
  },
  {
    "id": "eqkIB94DX6N4zaKbqlhN",
    "_id": {
      "$oid": "60de0704e2c8c53194aee456"
    },
    "popularity": null,
    "question": "Объясните\n разницу между синхронными и асинхронными функциями",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "difficulty": "junior",
    "description": "",
    "answer": {
      "link": [
        "https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html",
        "http://theproactiveprogrammer.com/javascript/the-javascript-event-loop-a-stack-and-a-queue/"
      ],
      "code": [],
      "text": [
        "Синхронные\n функции являются блокирующими, а асинхронные — нет. В синхронных функциях\n одна операция должна завершиться, прежде чем будет запущена следующая\n операция. В этом случае скрипт выполняется строго по порядку операций, и\n выполнение скрипта приостанавливается, если одна из операций занимает очень\n много времени. <br>\n Асинхронные функции обычно принимают callback-функцию в качестве параметра,\n и выполнение продолжается на следующей строке сразу после вызова асинхронной\n функции. Callback-функция вызывается только тогда, когда асинхронная операция\n завершена и стек вызовов пуст. Ресурсоемкие операции, такие как загрузка\n данных с веб-сервера или запросы к базе данных, должны выполняться\n асинхронно, чтобы основной поток мог продолжать выполнять другие операции\n вместо блокировки до завершения этой долгой операции (в случае браузеров\n пользовательский интерфейс будет зависать). <br>\n <br>\n Что такое цикл событий (event loop)? В чем разница между стеком вызовов\n (call stack) и очередью событий (task queue)? <br>\n Цикл событий — это однопоточный цикл, который контролирует стек вызовов и\n проверяет, есть ли какая-либо работа, которую необходимо выполнить в очереди\n задач. Если стек вызовов пуст и в очереди задач есть callback-функции, то\n функция удаляется из очереди и помещается в стек вызовов для выполнения.\n <br>\n Рекомендую ознакомиться с докладом о цикле событий от Philip Robert. Это\n одно из самых популярных видео о JavaScript. <br>\n https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html"
      ]
    }
  },
  {
    "id": "f5SGK6pZ5eWxMdaK6YDJ",
    "difficulty": "junior",
    "answer": {
      "text": [
        "3\n <br>\n ~~3.14 <br>\n ~ = Округление вниз <br>\n ~~ = Преобразования строки в число <br>\n "
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4cd"
    },
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "question": "Какое\n значение возвращает данное предложение? ~~3.14",
    "type": "question",
    "description": ""
  },
  {
    "id": "fsaKDVzM0ZT9ZWXMMwMG",
    "description": "",
    "popularity": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ea"
    },
    "type": null,
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">prototype (у класса ссылка на constructor)</div>\n </div>",
    "difficulty": null
  },
  {
    "id": "gdBpPzWVUU5gJjTnA9Ef",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Функциональное\n программирование — это декларативная концепция программирования или образец\n (паттерн) того, как строятся приложения, как используются функции, содержащие\n выражения, которые вычисляют значения без изменения аргументов, которые им\n передаются. <br>\n Объект Array содержит методы map, filter и reduce, которые являются самыми\n известными функциями в мире функционального программирования из-за их\n полезности, а также потому, что они не изменяют массив, что делает эти\n функции «чистыми». Также в JS имеются замыкание и функции высшего порядка,\n которые являются характеристиками функционального языка программирования."
      ]
    },
    "type": "question",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d1"
    },
    "difficulty": "junior",
    "question": "Что\n такое функциональное программирование и какие особенности JS позволяют\n говорить о нем как о функциональном языке программирования?",
    "description": "",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "goR56CVPUtgpuQ52jk5e",
    "competence": [],
    "type": null,
    "description": "",
    "question": "Замыкания\n и IIFE",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee512"
    },
    "difficulty": null,
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    }
  },
  {
    "id": "hAEPs5SjZMCy1tXlsPp1",
    "popularity": null,
    "question": "В\n чём различие между юнит-тестами и функциональными/интеграционными тестами?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee47c"
    },
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Обычно\n используют два вида автоматических тестов: <br>\n Модульное тестирование (тестирование отдельных частей продукта, обычно\n отдельных функций/методов) <br>\n Функциональное тестирование — тестирование некого функционала продукта, при\n этом продукт воспринимается как единый «чёрный ящик». <br>\n "
      ]
    },
    "type": "question"
  },
  {
    "id": "hiI1y5pPjRvjZ83YTu8q",
    "difficulty": "junior",
    "type": "question",
    "answer": {
      "text": [
        "Это\n значение генерирует блочный элемент, который обтекается другими элементами\n веб-страницы подобно встроенному элементу. Фактически такой элемент по своему\n действию похож на встраиваемые элементы (вроде тега &lt;img&gt;). При этом\n его внутренняя часть форматируется как блочный элемент, а сам элемент — как\n встроенный."
      ],
      "link": [],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee479"
    },
    "popularity": null,
    "question": "В\n чем разница между строчным и блочно-строчным элементом?",
    "description": "",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "hiXj6O0OA6cwcga3bs0n",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "question": "Как получить координаты объекта?",
    "answer": {
      "code": [],
      "text": [
        "getBoundingClientRect"
      ],
      "link": []
    },
    "description": "Как получить координаты объекта?",
    "type": "question",
    "popularity": "4"
  },
  {
    "id": "hofyoCOCszDAdhPJ4L4o",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "question": "Можете\n ли вы привести пример использования стрелочных функции =&gt;? Чем они\n отличаются от других функций?",
    "popularity": null,
    "difficulty": "junior",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "Одним\n очевидным преимуществом стрелочных функций является упрощение синтаксиса,\n необходимого для создания функций, без необходимости использования ключевого\n слова function. This внутри стрелочных функций также привязано к замыкающей\n области видимости, в отличие от обычных функций, где this определяется\n контекстом, в котором они вызываются. Лексически привязанное this полезно при\n вызове callback-функций, особенно в компонентах React."
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee45a"
    },
    "description": ""
  },
  {
    "id": "iClWdAp6CpSc9iXyLK3M",
    "type": "question",
    "competence": [
      "common questions"
    ],
    "description": "Что за штука такая?",
    "answer": {
      "code": [],
      "text": [
        "Внутренний стандарт Microsoft для названия переменных. Для облегчения понимания что чем является и стандартизации написания кода."
      ],
      "link": [
        "http://codenet.ru/progr/visualc/Hungarian-Notation.php",
        "https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%BD%D0%B3%D0%B5%D1%80%D1%81%D0%BA%D0%B0%D1%8F_%D0%BD%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F"
      ]
    },
    "question": "Или что такое Венгерская нотация?\n",
    "difficulty": "junior",
    "popularity": "3"
  },
  {
    "id": "iNRhbjqMZlJtKSXt2vJv",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "answer": {
      "text": [
        "&lt;html\n lang=\"fr\"&gt; <br>\n &lt;span title=\"Spanish\"&gt;&lt;a lang=\"es\"\n href=\"qa-html-language-declarations.es\"&gt;Español&lt;/a&gt;&lt;/span&gt;\n <br>\n Это пример HTTP заголовка <br>\n Content-Language: en, hi, pa <br>\n "
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee468"
    },
    "popularity": null,
    "question": "Как\n следует оформлять страницу, содержимое которой может быть на разных языках?",
    "type": "question",
    "description": ""
  },
  {
    "id": "ilGxYSK4w35lA3j6FKZF",
    "description": "",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "Ширина\n — ширина площади содержимого элемента. Для блочных элементов значение по\n умолчанию равно 100%. У строчных элементов ширина зависит от содержимого.\n <br>\n Высота — определяет высоту элемента. Как правило, она зависит от\n внутреннего содержимого, но при желании можно указать конкретную высоту.\n Опять же, это работает только с блочными элементами. <br>\n Границы — границы есть у каждого элемента, даже если вы их не видите. У них\n может быть разный размер, цвет и оформление. <br>\n Отступы — они определяют расстояние между границей элемента и его\n содержимым. Их можно использовать, например, для того, чтобы текст внутри\n элемента оставался читаемым. <br>\n Поля — они определяют расстояние между границей элемента и тем, что его\n окружает."
      ]
    },
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee477"
    },
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "question": "Объясните\n своими словами, что такое блочная модель.",
    "difficulty": "junior"
  },
  {
    "id": "ipXEJgoCTFZzcWdbqrT3",
    "type": "question",
    "description": "",
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "Accessible\n Rich Internet Applications <br>\n htmo role <br>\n "
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee465"
    },
    "difficulty": "junior",
    "popularity": null,
    "question": "Объясните,\n что такое ARIA и скринридеры, а также как сделать сайт доступным."
  },
  {
    "id": "itwp5b6OMnh2xVuhswoU",
    "difficulty": null,
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee505"
    },
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">S - single responsobility - все связи выносить в\n отдельные сущности (единственность зависимости)</div>\n </div>",
    "popularity": null,
    "type": null,
    "competence": [],
    "description": ""
  },
  {
    "id": "iy5h7zWBaC9TYFSpy1CN",
    "difficulty": null,
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "type": null,
    "competence": [],
    "question": "Abstract\n Syntax Tree (AST)",
    "description": "",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e6"
    }
  },
  {
    "id": "j8C8R6aVYGtxVu5Y7MDu",
    "answer": {
      "text": [
        "Когда\n событие срабатывает на элементе DOM, оно попытается обработать событие (если\n привязан обработчик), затем событие всплывет вверх к своему родителю и это\n повторится снова. Подобное всплытие проходит по всем предкам элемента вплоть\n до `document`. Всплытие событий является механизмом, на котором основано\n делегирование событий. <br>\n <br>\n В чем разница между \"атрибутом\" (attribute) и\n \"свойством\" (property)? <br>\n Атрибуты определены в разметке HTML, а свойства определены в DOM. Чтобы\n проиллюстрировать разницу, представьте, что у нас есть это текстовое поле в\n HTML: &lt;input type=\"text\" value=\"Hello\"&gt;. <br>\n const input = document.querySelector('input'); <br>\n console.log(input.getAttribute('value')); // Hello <br>\n console.log(input.value); // Hello <br>\n Но после того, как вы измените значение текстового поля, добавив к нему\n \"World!\", будет: <br>\n console.log(input.getAttribute('value')); // Hello <br>\n console.log(input.value); // Hello World!"
      ],
      "code": [],
      "link": [
        "https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html"
      ]
    },
    "popularity": null,
    "question": "Объясните,\n что такое всплытие событий (event bubbling)",
    "type": "question",
    "competence": [
      "common questions"
    ],
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee445"
    },
    "description": ""
  },
  {
    "id": "jHrY41nx0DU9nPGx47H3",
    "competence": [
      "javascript"
    ],
    "question": "Что\n делает и для чего нужна функция `Function.prototype.bind`?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee43d"
    },
    "answer": {
      "code": [],
      "text": [
        "Метод\n bind() создаёт новую функцию, которая при вызове устанавливает в качестве\n контекста выполнения this предоставленное значение. В метод также передаётся\n набор аргументов, которые будут установлены перед переданными в привязанную\n функцию аргументами при её вызове. <br>\n По моему опыту, это наиболее полезно для привязки значения this в методах\n классов, которые вы хотите передать в другие функции. Это часто делается в\n компонентах React."
      ],
      "link": [
        "https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind"
      ]
    },
    "popularity": "3",
    "difficulty": "junior",
    "description": "",
    "type": "question"
  },
  {
    "id": "jV37e9yguwftOoMjkEZG",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d4"
    },
    "competence": [
      "javascript"
    ],
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "num\n <br>\n bigint <br>\n string <br>\n boolean <br>\n null <br>\n undefined <br>\n obj <br>\n sym"
      ]
    },
    "difficulty": "junior",
    "popularity": null,
    "description": "",
    "type": "question",
    "question": "Типы\n данных"
  },
  {
    "id": "jiyaN7vUpK10tIF3QoZy",
    "popularity": null,
    "answer": {
      "text": [
        "#ОШИБКА!"
      ],
      "link": [
        "https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons"
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee448"
    },
    "question": "В\n чем разница между `==` и `===`?",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "description": ""
  },
  {
    "id": "jkFvaZex9h4DGrC0Bk3h",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee47b"
    },
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "question": "В\n чём разница между классом в ES6 и функцией-конструктором в ES5?",
    "description": "",
    "popularity": null,
    "difficulty": "junior"
  },
  {
    "id": "jkpoFbuLASvWEIqYnScu",
    "description": "",
    "difficulty": null,
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "question": "Как\n появляется контекст у функции",
    "popularity": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee519"
    },
    "type": null
  },
  {
    "id": "jpszSo7cP5HKKGMgzM7o",
    "type": "question",
    "popularity": "4",
    "answer": {
      "code": [],
      "text": [
        "создает новую функцию"
      ],
      "link": []
    },
    "question": "как работает bind?",
    "difficulty": "junior",
    "description": "bind",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "jyaXC5JjagVYx9gy3tec",
    "type": null,
    "competence": [],
    "difficulty": null,
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e3"
    },
    "question": "byte\n stream decoder",
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "popularity": null
  },
  {
    "id": "kFq9jrYlIY7suOskfJDe",
    "question": "Приходилось\n ли вам работать с языками HTML-шаблонизации?",
    "answer": {
      "code": [],
      "text": [
        "jade\n <br>\n SWIG <br>\n "
      ],
      "link": []
    },
    "type": "question",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee471"
    },
    "popularity": null,
    "difficulty": "junior",
    "description": ""
  },
  {
    "id": "kJAnifxxNC8XDunnCYmc",
    "description": "",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "question": "Для\n чего нужны атрибуты, начинающиеся с data-?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee46a"
    },
    "popularity": null,
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "В\n HTML5 для любого элемента можно использовать собственные атрибуты,\n начинающиеся с префикса data-. Это позволяет хранить разную информацию,\n которая может помочь в работе скриптов, а также для оформления элементов\n через CSS."
      ]
    }
  },
  {
    "id": "kYZ1LJRU7QJKKK56Lis6",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee48c"
    },
    "difficulty": "junior",
    "description": "",
    "question": "Можно\n ли из js менять значения в before, after?",
    "answer": {
      "text": [
        "Нет,\n единственное что мы можем — это удалить класс, у которого указаны before или\n after, либо наоборот добавить."
      ],
      "link": [],
      "code": []
    },
    "popularity": null,
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "kf3jnq3ucFantb51bk9E",
    "question": "Задача:\n Написать функцию, принимающую аргументом массив чисел и возвращающую новый\n массив, состоящий из удвоенных значений первого.",
    "answer": {
      "code": [],
      "text": [
        "Например:\n <br>\n f([1, 2, null, 7, 8, null, 3]); // =&gt; [2, 4, 14, 16, 6] <br>\n function f(arr) { <br>\n return arr <br>\n .filter(item =&gt; item !== null) <br>\n .map(item =&gt; item * 2); <br>\n } <br>\n "
      ],
      "link": []
    },
    "description": "",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b8"
    },
    "difficulty": "junior"
  },
  {
    "id": "kfQMp9LxefZ0LX8tPAUj",
    "competence": [
      "javascript"
    ],
    "description": "",
    "question": "Что\n выведется в консоль ? Объясните почему.",
    "difficulty": "junior",
    "answer": {
      "link": [],
      "text": [
        "var\n a={}, <br>\n b={key:'b'}, <br>\n c={key:'c'}; <br>\n a[b]=123; <br>\n a[c]=456; <br>\n console.log(a[b]); <br>\n Ответ: 456 <br>\n Что же происходит? Когда у объекта устанавливается новое свойство, то\n JavaScript неявно сделает stringify значения. В коде выше b и c являются\n объектами, следовательно они оба конвертируются в \"[object Object]\"\n (String). Так как stringify значения равны, то получается, что мы присваиваем\n новое значение одному и тому же свойству. <br>\n Равносильно, что написать: <br>\n var a={}, <br>\n b='object', <br>\n c='object'; <br>\n a[b]=123; <br>\n a[c]=456; <br>\n "
      ],
      "code": []
    },
    "type": "question",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c7"
    }
  },
  {
    "id": "kiDfh3Fe0cf41JN8wpgj",
    "competence": [
      "javascript",
      "frontend"
    ],
    "type": "question",
    "difficulty": "middle",
    "description": "envinment",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "definePlugins"
      ]
    },
    "question": "Как создавать окружения в вебпаке?",
    "popularity": "3"
  },
  {
    "id": "klqtMzpp4AQJWGdqgyXf",
    "question": "Что\n такое делегирование событий? Плюсы/минусы/подводные камни.",
    "competence": [
      "javascript"
    ],
    "description": "",
    "answer": {
      "text": [
        "Делегирование\n событий — подход при работе с событиями DOM-дерева, при котором обработчики\n событий добавляются не на каждый конкретный элемент, а только на общий\n родительский, в то время как необходимость вызова это обработчика для\n конкретного интересующего нас элемента определяется через ин <br>\n ициатора события, узнать который можно из свойства объекта события\n event.target. <br>\n Такой подход возможен благодаря особенностям событийной модели DOM-дерева,\n а конкретно такой особенности, как всплытие событий. <br>\n Плюсы <br>\n Такой подход будет хорош, если элементы на странице или в какой-то области\n создаются динамически на протяжении какого-то промежутка времени. В этом\n случае, при использовании делегирования, мы можем позволить себе добавить обработчик\n события единожды и не отслеживать тот момент когда эти элементы будут\n созданы. <br>\n Кроме прочего это в лучшую сторону отразится на потреблении памяти, если\n таких элементов будет немало. <br>\n На самом деле, подход с делегированием событием имеет право на жизнь даже\n если все элементы уже созданы в DOM и их состав не предполагает динамического\n изменения, но при этом их количество достаточно велико. <br>\n Минусы <br>\n Чуть меньшая «прозрачность» и очевидность по сравнению с тем когда обработчик\n события добавляется непосредственно для нужного элемента. <br>\n Потенциально чуть больше нагрузки ложится на CPU, т.к. любое возникновения\n события внутри родительского элемента запускает обработчик и поиск\n необходимого элемента для проверки необходимости работы основного\n обработчика. Так что тут всё индивидуально, в каждом конкретном случае надо\n смотреть насколько вероятны возникновения событий, которые будут приходиться\n «мимо» целевых элементов и что нам более важно оптимизировать — память или\n CPU. <br>\n Подводные камни <br>\n Любой неосторожный event.stopPropagation может прервать цепочку всплытия\n события и оно не дойдёт до родительского элемента, на котором установлен\n обработчик. <br>\n Если реализуете делегирование собственноручно, а не используете готовое\n решение, то не стоит забывать про тот нюанс, что недостаточно проверить\n event.target на соответствие требуемому элементу. Необходимо искать по дереву\n вверх до тех пор пока либо не встретим либо этот элемент, либо родительский,\n либо дойдём до вершины дерева. Причиной тому служит всё то же всплытие\n событий — инициатором события может оказаться один из элементов, вложенных в\n наш, а не он сам. <br>\n "
      ],
      "code": [],
      "link": []
    },
    "type": "question",
    "popularity": null,
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b4"
    }
  },
  {
    "id": "kmR4N3bKZVzvWYvJ0WtF",
    "type": "question",
    "description": "равны ли простые обьекты",
    "competence": [
      "javascript"
    ],
    "question": "Как проверить обьекты на равенство?",
    "answer": {
      "code": [],
      "text": [
        "JSON.stringify(0bj) === JSON.stringify(0bj)"
      ],
      "link": []
    },
    "popularity": "5",
    "difficulty": "junior"
  },
  {
    "id": "ku6UsFeGl4dhM5iDje3k",
    "answer": {
      "text": [
        "Дана\n структура данных в виде дерева: <br>\n const tree = { <br>\n value: 1, <br>\n children: [ <br>\n { <br>\n value: 2, <br>\n children: [ <br>\n { value: 4 }, <br>\n { value: 5 }, <br>\n ] <br>\n }, <br>\n { <br>\n value: 3, <br>\n children: [ <br>\n { value: 6 }, <br>\n { value: 7 }, <br>\n ] <br>\n } <br>\n ] <br>\n }; <br>\n Необходимо написать функцию, возвращающую значения всех вершин дерева:\n <br>\n getTreeValues(tree); // =&gt; [1, 2, 3, 4, 5, 6, 7] <br>\n Через рекурсию: <br>\n function getTreeValues(tree) { <br>\n let values = [ tree.value ]; <br>\n if (Array.isArray(tree.children)) { <br>\n tree.children.forEach(item =&gt; values =\n values.concat(getTreeValues(item))); <br>\n } <br>\n return values; <br>\n } <br>\n Через цикл: <br>\n function getTreeValues(tree) { <br>\n const tmpTree = [tree]; <br>\n const res = []; <br>\n let current; <br>\n while (tmpTree.length &gt; 0) { <br>\n current = tmpTree.shift(); <br>\n res.push(current.value); <br>\n if (current.children) { <br>\n current.children.forEach(item =&gt; tmpTree.push(item)); <br>\n } <br>\n } <br>\n return res <br>\n } <br>\n "
      ],
      "link": [],
      "code": []
    },
    "question": "Задача:\n Обход дерева",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b9"
    },
    "popularity": null,
    "description": "",
    "difficulty": "junior",
    "type": "question",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "kzvjCu2ZJuwLdFbi6jeE",
    "difficulty": "junior",
    "answer": {
      "text": [
        "Основным\n преимуществом использования стрелочной функции в качестве метода внутри\n конструктора является то, что значение this устанавливается во время создания\n функции и не может измениться после этого. Таким образом, когда конструктор\n используется для создания нового объекта, this всегда будет ссылаться на этот\n объект. Например, допустим, у нас есть конструктор Person, который принимает\n имя в качестве аргумента, имеет два метода для вывода в консоль этого имени,\n один в качестве обычной функции, а другой в качестве стрелочной: <br>\n const Person = function(firstName) { <br>\n this.firstName = firstName; <br>\n this.sayName1 = function() { console.log(this.firstName); }; <br>\n this.sayName2 = () =&gt; { console.log(this.firstName); }; <br>\n }; <br>\n const john = new Person(‘John’); <br>\n const dave = new Person(‘Dave’); <br>\n john.sayName1(); // John <br>\n john.sayName2(); // John <br>\n // У обычной функции значение `this` может быть изменено, но у стрелочной\n функции нет <br>\n john.sayName1.call(dave); // Dave (потому что ‘this’ сейчас ссылается на\n объект dave) <br>\n john.sayName2.call(dave); // John <br>\n john.sayName1.apply(dave); // Dave (потому что ‘this’ сейчас ссылается на\n объект dave) <br>\n john.sayName2.apply(dave); // John <br>\n john.sayName1.bind(dave)(); // Dave (потому что ‘this’ сейчас ссылается на\n объект dave) <br>\n john.sayName2.bind(dave)(); // John <br>\n var sayNameFromWindow1 = john.sayName1; <br>\n sayNameFromWindow1(); // undefined (потому что ‘this’ сейчас ссылается на\n объект window) <br>\n var sayNameFromWindow2 = john.sayName2; <br>\n sayNameFromWindow2(); // John <br>\n Смысл заключается в том, что this можно изменить для обычной функции, но\n для стрелочных функций контекст всегда остается неизменным. Поэтому, даже\n если вы передаете стрелочную функцию в разные части вашего приложения, вам не\n нужно беспокоиться об изменении контекста. <br>\n Это может быть особенно полезно в классовых React-компонентах. Если вы\n определяете метод класса для чего-то такого, как обработчик клика, используя\n обычную функцию, а затем передаете этот обработчик в дочерний компонент в\n качестве prop, вам также необходимо привязать this в конструкторе\n родительского компонента , Если вместо этого вы используете стрелочную\n функцию, то нет необходимости привязывать this, так как метод автоматически\n получит свое значение this из замыкающего лексического контекста. (Прочитайте\n эту статью о стрелочных функциях:\n https://medium.com/@machnicki/handle-events-in-react-with-arrow-functions-ede88184bbb)"
      ],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
        "https://medium.com/@machnicki/handle-events-in-react-with-arro<span style=\"display:none\">w-functions-ede88184bbb</span>"
      ],
      "code": []
    },
    "popularity": null,
    "question": "В\n чем преимущество использования стрелочных функций для метода в конструкторе?",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee45b"
    }
  },
  {
    "id": "lMsMYvUOJPYzukgdXCvN",
    "description": "Пожалуйста! Еще разик!",
    "type": "question",
    "difficulty": "junior",
    "answer": {
      "link": [
        "https://davidwalsh.name/event-delegate",
        "https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation"
      ],
      "code": [
        " applyFilter(event: Event) {\n const filterValue = (event.target as HTMLInputElement).value;\n this.dataSource.filter = filterValue.trim().toLowerCase();\n }",
        " ngAfterViewInit() {\n this.dataSource.sort = this.sort;\n }",
        " // фильтруем таски как надо и выставляем в таблицу\n setTableData(config: ISobesConfigModel): void {\n let newDataSource: ITask[] = [];\n\n let matchedQuestions: ITask[] = [];\n let matchedExercises: ITask[] = [];\n let unmatchedQuestions: ITask[] = [];\n let unmatchedExercises: ITask[] = [];\n\n let questionNumber = Math.round(config.count * config.type / 100);\n let exerciseNumber = config.count - questionNumber;\n\n this.tasks.forEach((task: ITask) => {\n let taskChecker = (task: ITask, config: ISobesConfigModel) => {\n return task.competence.every(v => config.competence.includes(v));\n };\n if (config.difficulty.includes(task.difficulty) && config.popularity.includes(task.popularity) && taskChecker(task, config)) {\n if (task.type === 'question') {\n matchedQuestions.push(task)\n }\n if (task.type === 'exercise') {\n matchedExercises.push(task)\n }\n } else {\n if (task.type === 'question') {\n unmatchedQuestions.push(task)\n } else if (task.type === 'exercise') {\n unmatchedExercises.push(task)\n } else {\n unmatchedQuestions.push(task);\n }\n }\n });\n\n let matchedQuestionsRandom = [];\n for (let i = 0; i < matchedQuestions.length; i++) {\n let it = this.randomizer(matchedQuestions);\n matchedQuestionsRandom.push(it);\n }\n\n let matchedExercisesRandom = [];\n for (let i = 0; i < matchedExercises.length; i++) {\n let it = this.randomizer(matchedExercises);\n matchedExercisesRandom.push(it);\n }\n\n let unmatchedQuestionsRandom = [];\n for (let i = 0; i < unmatchedQuestions.length; i++) {\n let it = this.randomizer(unmatchedQuestions);\n unmatchedQuestionsRandom.push(it);\n }\n\n let unmatchedExercisesRandom = [];\n for (let i = 0; i < unmatchedExercises.length; i++) {\n let it = this.randomizer(unmatchedExercises);\n unmatchedExercisesRandom.push(it);\n }\n\n let questions: ITask[] = matchedQuestionsRandom.concat(unmatchedQuestionsRandom);\n let exercises: ITask[] = matchedExercisesRandom.concat(unmatchedExercisesRandom);\n\n newDataSource.push(...questions.slice(0, questionNumber));\n newDataSource.push(...exercises.slice(0, exerciseNumber));\n\n if (questionNumber > questions.length) {\n newDataSource.push(...exercises.slice(exerciseNumber, exerciseNumber + questionNumber - questions.length));\n }\n\n if (exerciseNumber > exercises.length) {\n newDataSource.push(...questions.slice(questionNumber, questionNumber + exerciseNumber - exercises.length));\n }\n newDataSource = this.setTableIndex(0, newDataSource);\n this.dataSource = new MatTableDataSource(newDataSource);\n }"
      ],
      "text": [
        "Делегирование\n событий — это приём, заключающийся в добавлении обработчиков событий к\n родительскому элементу, а не к дочерним элементам. Обработчик будет\n срабатывать всякий раз, когда событие будет запущено на дочерних элементах\n благодаря всплытию событий в DOM. Преимущества этого приёма:<br>\n Экономит объем используемой памяти, т.к. для родительского элемента\n требуется только один обработчик.<br>\n Не нужно привязывать или убирать обработчики при добавлении и удалении\n элементов.",
        "Еще многого много текста ответ"
      ]
    },
    "popularity": "5",
    "_id": {
      "$oid": "60de0704e2c8c53194aee430"
    },
    "question": "Объясните\n делегирование событий",
    "competence": [
      "javascript",
      "html"
    ]
  },
  {
    "id": "lbWxNrLHgkZKfSzFAfJG",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "var\n sum = 101*50, <br>\n sumArr = eval([4, 2, ... 3, 7].join('+').replace('++', '+')), <br>\n res; <br>\n res = sum-sumArr; <br>\n "
      ]
    },
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "question": "Как\n быстрее всего найти сумму элементов массива?",
    "description": "",
    "difficulty": "junior",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee49a"
    }
  },
  {
    "id": "lcvVPWE6lB3RCbmtAbcc",
    "difficulty": "junior",
    "popularity": "4",
    "answer": {
      "code": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"
      ],
      "text": [
        "Находит позицию элемента на странице с точками-вершинами"
      ],
      "link": []
    },
    "question": "ЧТо такое .getBoundingClientRect()?",
    "type": "question",
    "description": "getBoundingClientRect",
    "competence": [
      "javascript",
      "html",
      "css"
    ]
  },
  {
    "id": "m3JByqTjWZhoWY4psE9F",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4df"
    },
    "type": null,
    "question": "execution\n context",
    "popularity": null,
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "description": "",
    "competence": [],
    "difficulty": null
  },
  {
    "id": "m6XVRIPFqHjPJHS3tdQt",
    "popularity": null,
    "difficulty": null,
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "type": null,
    "question": "Откуда\n берется свойство length у массива",
    "_id": {
      "$oid": "60de0704e2c8c53194aee51c"
    },
    "competence": [],
    "description": ""
  },
  {
    "id": "mDvoQospWhIZZAhsfq85",
    "type": "question",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "var\n foo = \"Hello\"; <br>\n (function() { <br>\n var bar = \" World\"; <br>\n alert(foo + bar); <br>\n })(); <br>\n alert(foo + bar); <br>\n Hello world &amp;&amp; ReferenceError <br>\n "
      ]
    },
    "question": "Что\n покажут эти два alert?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee486"
    },
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "description": ""
  },
  {
    "id": "mHVoUjAobmw31yT7oA8p",
    "difficulty": "junior",
    "question": "Что\n выводит код ниже?",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee489"
    },
    "answer": {
      "link": [],
      "code": [],
      "text": [
        "console.log('one');\n <br>\n setTimeout(function() { <br>\n console.log('two'); <br>\n }, 0); <br>\n console.log('three'); <br>\n "
      ]
    },
    "type": "question",
    "description": "",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "mvCNUPRa1ZW8Z2XxXtxh",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee491"
    },
    "question": "Нарисовать\n стилями полукруг.",
    "competence": [
      "javascript"
    ],
    "answer": {
      "link": [],
      "text": [
        "width:\n 100px; <br>\n height: 100px; <br>\n border-right: 1px solid #f00; <br>\n border-radius: 0 50% 50% 0; <br>\n "
      ],
      "code": []
    },
    "difficulty": "junior",
    "type": "question",
    "description": ""
  },
  {
    "id": "mwblxGSefusnWXYPE2dU",
    "popularity": null,
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee50a"
    },
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "competence": [],
    "description": "",
    "question": "Какие\n есть типы переменных?",
    "type": null
  },
  {
    "id": "nH9TcyT5LCtlsKU4nmGN",
    "description": "",
    "type": null,
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee504"
    },
    "question": "Интерпретатор\n Ignition",
    "difficulty": null,
    "competence": [],
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    }
  },
  {
    "id": "nRom6LlWEOjbMWSMujOD",
    "popularity": null,
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "function\n validBraces(str) { <br>\n <br>\n var arrOpenSymbols = [], <br>\n result = false, <br>\n countOpenSymbols; <br>\n if (str.length &gt; 0) { <br>\n for (var i = 0; i &lt; str.length; i++) { <br>\n if (str[i] === '{' || str[i] === '[' || str[i] === '(') { <br>\n arrOpenSymbols.push(str[i]); <br>\n } else { <br>\n countOpenSymbols = arrOpenSymbols.length; <br>\n if ((str[i] === '}' &amp;&amp; arrOpenSymbols[(countOpenSymbols-1)] ===\n '{') || <br>\n (str[i] === ']' &amp;&amp; arrOpenSymbols[(countOpenSymbols-1)] === '[') ||\n <br>\n (str[i] === ')' &amp;&amp; arrOpenSymbols[(countOpenSymbols-1)] === '(')\n <br>\n ) { <br>\n arrOpenSymbols.pop(); <br>\n } <br>\n } <br>\n } <br>\n <br>\n if (arrOpenSymbols.length === 0) { <br>\n result = true; <br>\n } else { <br>\n result = false; <br>\n } <br>\n } <br>\n return result; <br>\n } <br>\n console.log(''); <br>\n console.log(validBraces('()')); <br>\n console.log(validBraces('[)')); <br>\n console.log(validBraces('{}[]()')); <br>\n console.log(validBraces('([{}])')); <br>\n console.log(validBraces('())({}}{()][][')); <br>\n "
      ]
    },
    "question": "Есть\n строка, состоящая из разных скобок, проверить закрыты ли все. Пример строки:\n \"())({}}{()][][\"",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a6"
    },
    "description": ""
  },
  {
    "id": "nsQQAoJUhqoyAplakUyD",
    "difficulty": null,
    "question": "Чем\n ООП в JS отличается от ООП в других языках",
    "_id": {
      "$oid": "60de0704e2c8c53194aee521"
    },
    "type": null,
    "competence": [],
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "popularity": null,
    "description": ""
  },
  {
    "id": "nw3jTZUGQPxBpe9DeDxu",
    "type": "question",
    "description": "",
    "question": "Вместить\n три блока 20X20px в ряд, в блок шириной 60px, при этом у блоков должны быть\n границы.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee48d"
    },
    "difficulty": "junior",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "&lt;div\n class=\"wrap\"&gt; <br>\n &lt;div class=\"block\"&gt;&lt;/div&gt; <br>\n &lt;div class=\"block\"&gt;&lt;/div&gt; <br>\n &lt;div class=\"block\"&gt;&lt;/div&gt; <br>\n &lt;/div&gt; <br>\n .wrap { <br>\n width: 600px; <br>\n height: 200px; <br>\n border: 1px solid green; <br>\n } <br>\n .block { <br>\n float: left; <br>\n width: 200px; <br>\n height: 200px; <br>\n outline: 1px solid black; <br>\n } <br>\n "
      ]
    },
    "competence": [
      "javascript"
    ],
    "popularity": null
  },
  {
    "id": "nwK4HEpyzorKCnC8PMyD",
    "description": "",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee496"
    },
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "answer": {
      "code": [],
      "text": [
        "function\n test() { <br>\n return new Promise(function (resolve) { <br>\n setTimeout (function () { <br>\n resolve(1); <br>\n }) <br>\n }) <br>\n } <br>\n async function test1() { <br>\n var res = await test(); <br>\n console.log(res + 1); <br>\n } <br>\n "
      ],
      "link": []
    },
    "question": "Промисы\n все разрастаются и на смену Callback Hell приходит Promise Hell. Что же\n делать?",
    "difficulty": "junior"
  },
  {
    "id": "nyWOGVumN8wDHDozmXtI",
    "difficulty": null,
    "competence": [],
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">O - open closed principles - можем расширять, но не\n менять</div>\n </div>",
    "type": null,
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "popularity": null,
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee506"
    }
  },
  {
    "id": "o9jxCs3lEdmz9fIRpdGo",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f0"
    },
    "type": null,
    "competence": [],
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "popularity": null,
    "description": "",
    "question": "iterator",
    "difficulty": null
  },
  {
    "id": "oEoy0q7OhnMiRJFbQHM3",
    "_id": {
      "$oid": "60de0704e2c8c53194aee490"
    },
    "description": "",
    "popularity": null,
    "difficulty": "junior",
    "answer": {
      "text": [
        "body\n { <br>\n overflow: hidden; <br>\n } <br>\n .wrap { <br>\n position: fixed; <br>\n top: 0; <br>\n left: 0; <br>\n width: 100%; <br>\n height: 100%; <br>\n overflow-y: auto; <br>\n background-color: rgba(230, 230, 230, .1); <br>\n } <br>\n .popup { <br>\n position: absolute; <br>\n width: 400px; <br>\n height: 300px; <br>\n right: 0; <br>\n left: 0; <br>\n top: 0; <br>\n bottom: 0; <br>\n margin: auto; <br>\n } <br>\n "
      ],
      "code": [],
      "link": []
    },
    "question": "Требуется\n сверстать попап по центру, его размеры нам известны, но мы не хотим что бы он\n прокручивался вместе со страницей, причем по высоте может и не влезать в\n высоту экрана.",
    "competence": [
      "javascript"
    ],
    "type": "question"
  },
  {
    "id": "oyUbl6D4cQ1k90xnCBvQ",
    "difficulty": null,
    "popularity": null,
    "type": null,
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "competence": [],
    "question": "Графы",
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4fb"
    }
  },
  {
    "id": "pK53IpxExhnWZLtyFjRr",
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee502"
    },
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "popularity": null,
    "description": "",
    "type": null,
    "question": "Компилятор\n Turbofan",
    "difficulty": null
  },
  {
    "id": "pdfg8LDl1uvFtOF6uqh4",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e2"
    },
    "competence": [],
    "question": "stream\n of bytes",
    "difficulty": null,
    "popularity": null,
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "type": null,
    "description": ""
  },
  {
    "id": "phPZOGutvttB2n9Z5oe1",
    "question": "Что такое фасад pattern?",
    "popularity": "5",
    "competence": [
      "common questions",
      "javascript"
    ],
    "difficulty": "senior",
    "description": "фасад pattern",
    "type": "question",
    "answer": {
      "link": [],
      "text": [
        "Надо посомтреть получше"
      ],
      "code": []
    }
  },
  {
    "id": "pstkA7bxGr3VrGS6ZtKu",
    "popularity": null,
    "type": null,
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "description": "",
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">[Symbol.iterator] (можно добавить в объект и он будет\n итерируемым, как массив)</div>\n </div>",
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f1"
    },
    "competence": []
  },
  {
    "id": "px1hzmlxhrPPkdgGKeRH",
    "popularity": null,
    "question": "Есть\n div, в нем другой div, у второго задан padding 50%, как это все будет\n выглядеть?",
    "difficulty": "junior",
    "description": "",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ".wrap\n { <br>\n width: 200px; <br>\n border: 1px solid green; <br>\n } <br>\n <br>\n .block { <br>\n width: 200px; <br>\n padding-bottom: 50%; <br>\n border: 1px solid red; <br>\n } <br>\n "
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a5"
    },
    "competence": [
      "javascript"
    ],
    "type": "question"
  },
  {
    "id": "q2dEawsu6PXHcbJwUfPv",
    "question": "Что такое pr?",
    "popularity": "4",
    "difficulty": "junior",
    "type": "question",
    "description": "Pull request",
    "answer": {
      "link": [],
      "text": [
        "pull request (открываем ветку куда запушили, делаем пул реквест с коментарием в основную ветку, в основной ветке принимаем)"
      ],
      "code": []
    },
    "competence": [
      "common questions"
    ]
  },
  {
    "id": "qBqJ6wUx7rih3LPHWPaS",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a2"
    },
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "function\n one(arg){ <br>\n if (typeof arg === 'function') { <br>\n return arg(1); <br>\n } else { <br>\n return 1; <br>\n } <br>\n } <br>\n function seven(arg) { <br>\n if (typeof arg === 'function') { <br>\n return arg(7); <br>\n } else { <br>\n return 7; <br>\n } <br>\n } <br>\n function plus(arg) { <br>\n return function (a) { <br>\n return a + arg; <br>\n } <br>\n } <br>\n "
      ]
    },
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "question": "Еще\n интересный пример. Реализовать методы seven, plus, one, five, minus, two.\n seven(plus(one())) -&gt; 8. five(minus(two())) -&gt; 3",
    "type": "question",
    "popularity": null
  },
  {
    "id": "qLqXPkb7KfK794wWUAGI",
    "_id": {
      "$oid": "60de0704e2c8c53194aee460"
    },
    "description": "",
    "answer": {
      "code": [],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Referenc<span style=\"display:none\">e/Functions/rest_parameters</span>",
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Referenc<span style=\"display:none\">e/Operators/Destructuring_assignment</span>"
      ],
      "text": [
        "Spread\n оператор синтаксиса ES6 очень полезен при написании кода в функциональном\n стиле, поскольку мы можем легко создавать копии массивов или объектов, не\n прибегая к Object.create, slice или функции библиотеки. Эта языковая функция\n часто используется в проектах с Redux и rx.js. <br>\n function putDookieInAnyArray(arr) { <br>\n return […arr, ‘dookie’]; <br>\n } <br>\n const result = putDookieInAnyArray([‘I’, ‘really’, “don’t”, ‘like’]); //\n [“I”, “really”, “don’t”, “like”, “dookie”] <br>\n const person = { <br>\n name: ‘Todd’, <br>\n age: 29, <br>\n }; <br>\n const copyOfTodd = { …person }; <br>\n В свою очередь, rest оператор синтаксиса ES6 позволяет в сокращенном виде\n указывать неопределенное количество аргументов, передаваемых в функцию. Можно\n сказать, что он противоположен spread оператору: собирает данные и добавляет\n их в массив, вместо разделения массива данных. Он используется в аргументах\n функций, а также при деструктуризации массивов и объектов. <br>\n function addFiveToABunchOfNumbers(…numbers) { <br>\n return numbers.map(x =&gt; x + 5); <br>\n } <br>\n const result = addFiveToABunchOfNumbers(4, 5, 6, 7, 8, 9, 10); // [9, 10,\n 11, 12, 13, 14, 15] <br>\n const [a, b, …rest] = [1, 2, 3, 4]; // a: 1, b: 2, rest: [3, 4] <br>\n const { e, f, …others } = { <br>\n e: 1, <br>\n f: 2, <br>\n g: 3, <br>\n h: 4, <br>\n }; // e: 1, f: 2, others: { g: 3, h: 4 }"
      ]
    },
    "difficulty": "junior",
    "popularity": null,
    "question": "В\n чем преимущества использования spread оператора и чем он отличается от rest\n оператора?",
    "type": "question",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "qPldh9jslARDWh2EEt3B",
    "type": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee508"
    },
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">I - Interface segregation principle - не использовать\n слишком большие не связаннные контракты, интерфейсы маленькие, чтобы не один\n обьет работал со всеми</div>\n </div>",
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "difficulty": null,
    "description": "",
    "popularity": null
  },
  {
    "id": "qZIvp4C8WCbaqJcM9b1F",
    "question": "Что такое .closest('.column')?",
    "description": ".closest('.column')",
    "answer": {
      "code": [],
      "text": [
        "Он ищет ближайшего родителя по модификатору. Лучше чем parentNode"
      ],
      "link": []
    },
    "difficulty": "junior",
    "type": "question",
    "popularity": "3",
    "competence": [
      "javascript",
      "html",
      "css"
    ]
  },
  {
    "id": "r3AUI5F1BHK7xo9Kk6Ww",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4da"
    },
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "difficulty": null,
    "popularity": null,
    "description": "",
    "competence": [],
    "question": "scope\n chain",
    "type": null
  },
  {
    "id": "r8eqKsGirIaIyryvjM6n",
    "_id": {
      "$oid": "60de0704e2c8c53194aee463"
    },
    "question": "Можете\n ли вы описать разницу между прогрессивным улучшением и изящной деградацией?",
    "popularity": null,
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "(graceful\n degradation) — принцип сохранения работоспособности при потере части\n функциональности. Отказоустойчивость клиентских веб-интерфейсов. <br>\n (progressive enhancement,) - Прогрессивное улучшение предполагает, что\n веб-интерфейсы должны создаваться поэтапно, циклически, от простого к\n сложному. На каждом из этапов должен получаться законченный веб-интерфейс,\n который будет лучше, красивее и удобнее предыдущего. Можно сказать, что\n сейчас таких этапов четыре: <br>\n <br>\n «Старый-добрый-HTML» <br>\n «CSS» <br>\n «CSS3» <br>\n «JavaScript» <br>\n отказоустойчивость клиентских веб-интерфейсов."
      ]
    },
    "type": "question",
    "competence": [
      "javascript"
    ],
    "description": "",
    "difficulty": "junior"
  },
  {
    "id": "rA4o7abGgQ4ZlATYzbxk",
    "popularity": null,
    "question": "В\n чем разница между классом в ES6 и функцией-конструктором в ES5?",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee459"
    },
    "answer": {
      "link": [
        "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance",
        "https://eli.thegreenplace.net/2013/10/22/classical-inheritance-in-javascript-es5"
      ],
      "code": [],
      "text": [
        "Для\n начала посмотрим на примеры: <br>\n // ES5 функция-конструктор <br>\n function Person(name) { <br>\n this.name = name; <br>\n } <br>\n // ES6 класс <br>\n class Person { <br>\n constructor(name) { <br>\n this.name = name; <br>\n } <br>\n } <br>\n Они выглядят довольно похоже, если рассматривать простые конструкторы.\n <br>\n Основное отличие в конструкторе возникает при использовании наследования.\n Если мы хотим создать класс `Student` (который будет являться подклассом\n класса `Person`) и добавить поле `studentId`, то, в дополнение к\n вышеописанному, мы должны сделать следующее: <br>\n // ES5 функция-конструктор <br>\n function Student(name, studentId) { <br>\n // Вызов конструктора суперкласса для инициализации производных от\n суперкласса членов. <br>\n Person.call(this, name); <br>\n // Инициализация собственных членов подкласса. <br>\n this.studentId = studentId; <br>\n } <br>\n Student.prototype = Object.create(Person.prototype); <br>\n Student.prototype.constructor = Student; <br>\n // ES6 класс <br>\n class Student extends Person { <br>\n constructor(name, studentId) { <br>\n super(name); <br>\n this.studentId = studentId; <br>\n } <br>\n } <br>\n Наследование в синтаксисе ES5 является намного более многословным, а в ES6\n более понятное и усваиваемое."
      ]
    },
    "difficulty": "junior",
    "description": ""
  },
  {
    "id": "rMeREgps5WFCmxfZ4rSn",
    "type": "question",
    "description": "В чем разница?",
    "popularity": "5",
    "difficulty": "beginner",
    "question": "px % em rem vw vw",
    "competence": [
      "common questions",
      "html",
      "css"
    ],
    "answer": {
      "code": [],
      "link": [
        "https://elementor.com/help/whats-the-difference-between-px-em-rem-vw-and-vh/"
      ],
      "text": [
        "Там в ссылке глянь"
      ]
    }
  },
  {
    "id": "rciDcDLQ98i6aNTRXPn4",
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ec"
    },
    "description": "",
    "type": null,
    "question": "prototype\n chain",
    "difficulty": null,
    "popularity": null,
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    }
  },
  {
    "id": "rhCq2NEyzUoQT3J0Vx9U",
    "description": "",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "popularity": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee511"
    },
    "question": "Что\n такое hoisting",
    "type": null,
    "difficulty": null
  },
  {
    "id": "rjQ4wX06mvEN87ZGXS97",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "question": "Задача:\n Логическое продолжение предыдущего вопроса — реализовать делегирование.",
    "type": "question",
    "popularity": null,
    "description": "",
    "answer": {
      "text": [
        "&lt;div\n class=\"wrapper\"&gt; <br>\n &lt;div class=\"child\"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;click\n me&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; <br>\n &lt;div class=\"child\"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;click me&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n <br>\n &lt;div class=\"child\"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;click\n me&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; <br>\n &lt;div class=\"other\"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;dont't\n click me&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; <br>\n &lt;/div&gt; <br>\n const delegate = (eventName, el, selector, handler) =&gt; { <br>\n el.addEventListener(eventName, (event) =&gt; { <br>\n let node = event.target; <br>\n const items = [].slice.call(el.querySelectorAll(selector)); <br>\n if (items.length) { <br>\n while (node !== el &amp;&amp; node !== null) { <br>\n const isTarget = items.some(item =&gt; node === item); <br>\n <br>\n if (isTarget) { <br>\n handler(node); <br>\n break; <br>\n } else { <br>\n node = node.parentNode; <br>\n } <br>\n } <br>\n } <br>\n }); <br>\n }; <br>\n delegate('click', document.querySelector('.wrapper'), '.child', (el) =&gt;\n el.style.backgroundColor = 'blue'); <br>\n "
      ],
      "code": [],
      "link": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4b5"
    }
  },
  {
    "id": "roL6X92DIP4udioxIsam",
    "competence": [],
    "popularity": null,
    "answer": {
      "code": [],
      "text": [
        ""
      ],
      "link": []
    },
    "question": "Что\n такое event loop и как мы его используем",
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee516"
    },
    "description": "",
    "type": null
  },
  {
    "id": "s9KHuZXcSqWi6gtOhn03",
    "question": "Расскажите,\n что такое поднятие (hoisting)",
    "_id": {
      "$oid": "60de0704e2c8c53194aee444"
    },
    "difficulty": "junior",
    "type": "question",
    "description": "",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "answer": {
      "text": [
        "Поднятие\n (hoisting) - это термин, используемый для объяснения поведения объявлений\n переменных в вашем коде. Переменные, объявленные или инициализированные при\n помощи ключевого слова var, будут перемещены в верхнюю часть текущей области,\n что мы называем \"поднятием\". Однако, \"поднимается\" только\n объявление переменной, присвоение значения (если оно имеется) останется на\n прежнем месте. <br>\n Обратите внимание, что объявление фактически не перемещается - движок\n JavaScript анализирует объявления во время компиляции и узнает о объявлениях\n и их областях видимости. Просто легче понять подобное поведение, представляя\n объявления как перемещение наверх своей области видимости. Давайте рассмотрим\n несколько примеров. <br>\n // объявления переменных через var поднимаются. <br>\n console.log(foo); // undefined <br>\n var foo = 1; <br>\n console.log(foo); // 1 <br>\n // объявления переменных через let/const НЕ поднимаются. <br>\n console.log(bar); // ReferenceError: bar is not defined <br>\n let bar = 2; <br>\n console.log(bar); // 2 <br>\n При объявлении функции ее тело поднимается наверх, в то время как у\n функциональных выражений (когда переменной присваивается функция) поднимается\n только переменная. <br>\n // Объявление функции <br>\n console.log(foo); // [Function: foo] <br>\n foo(); // 'FOOOOO' <br>\n function foo() { <br>\n console.log('FOOOOO'); <br>\n } <br>\n console.log(foo); // [Function: foo] <br>\n // Функциональное выражение <br>\n console.log(bar); // undefined <br>\n bar(); // Uncaught TypeError: bar is not a function <br>\n var bar = function() { <br>\n console.log('BARRRR'); <br>\n }; <br>\n console.log(bar); // [Function: bar]"
      ],
      "code": [],
      "link": []
    }
  },
  {
    "id": "sqOmqxop55HZw1v6v9eA",
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "type": null,
    "question": "Связные\n списки",
    "popularity": null,
    "description": "",
    "difficulty": null,
    "competence": [],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f9"
    }
  },
  {
    "id": "t7eDNfspmt7XOelkApnI",
    "type": "question",
    "description": "",
    "difficulty": "junior",
    "question": "Что\n будет если задать margin: -10px;",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ae"
    },
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "answer": {
      "text": [
        "Сдвинится\n вверх и влево на своих соседей"
      ],
      "link": [],
      "code": []
    }
  },
  {
    "id": "tGj90CNmKJD8X7uWPZe3",
    "answer": {
      "code": [],
      "text": [
        "defer\n <br>\n Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать\n страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт,\n когда он загрузится. <br>\n Атрибут async означает, что скрипт абсолютно независим: <br>\n <br>\n Страница не ждёт асинхронных скриптов, содержимое обрабатывается и\n отображается. <br>\n Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга: <br>\n DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный\n скрипт завершит загрузку после того, как страница будет готова), <br>\n …так и после асинхронного скрипта (если он короткий или уже содержится в\n HTTP-кеше) <br>\n Остальные скрипты не ждут async, и скрипты casync не ждут другие скрипты.\n <br>\n "
      ],
      "link": []
    },
    "question": "Объясните\n разницу между &lt;script&gt;, &lt;script async&gt; и &lt;script defer&gt;.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee46d"
    },
    "description": "",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "popularity": null,
    "type": "question"
  },
  {
    "id": "u6WC4mgpIxd6hsRkYnbH",
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee501"
    },
    "answer": {
      "text": [
        ""
      ],
      "code": [],
      "link": []
    },
    "question": "Компилятор\n Codegen",
    "description": "",
    "type": null,
    "popularity": null,
    "competence": []
  },
  {
    "id": "uMVyVrx8TikqYTMeEMI8",
    "competence": [
      "javascript"
    ],
    "description": "",
    "difficulty": "junior",
    "answer": {
      "code": [],
      "text": [
        "var\n arr = [{date: '10.01.2017'}, {date: '05.11.2016'}, {date: '21.13.2002'}];\n <br>\n <br>\n arr.forEach(function(item) { <br>\n var arrDate = item.date.split('.'), <br>\n date = new Date(Number(arrDate[2]), Number(arrDate[1]),\n Number(arrDate[0])); <br>\n item.time = date.getTime(); <br>\n }); <br>\n arr.sort(function (a, b) { <br>\n if (a.time - b.time &lt; 0) { <br>\n return false; <br>\n } else { <br>\n return true; <br>\n } <br>\n }); <br>\n var res = arr.map(function (item) { <br>\n return {date: item.date}; <br>\n }); <br>\n console.log(res); <br>\n "
      ],
      "link": []
    },
    "popularity": null,
    "question": "Есть\n массив в котором лежат объекты с датами, отсортировать по датам.",
    "_id": {
      "$oid": "60de0704e2c8c53194aee492"
    },
    "type": "question"
  },
  {
    "id": "uWUZko8dD6kom4N2y4ln",
    "_id": {
      "$oid": "60de0704e2c8c53194aee47d"
    },
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "type": "question",
    "answer": {
      "link": [],
      "text": [
        "Если\n очень кратко и поверхностно, то перед выводом картинки на экран браузер\n проходит 5 стадий, часть из которых может быть опущена: Обработка JS &gt;\n вычисление стилей &gt; расчет макета &gt; прорисовка &gt; компановка. С\n начала отрабатывают скрипты, в результате которых картинка может измениться.\n Далее идет вычисление стилей, чтобы понять, что изменилось и применить данные\n изменения. В свою очередь это может вызвать расчет макета, если были\n затронуты свойства, влияющие на размеры и т.п. элемента. После идет\n прорисовка, если были задеты свойства, вроде изменения цвета, тени и т.п.\n После идет компановка, то бишь сведение всех измененных слоев в правильном\n порядке и выведения их на экран пользователя. <br>\n Изоляция размеров — тот случай, когда у родителя отсутствует указание\n размеров, аля `width: auto; height: auto;` и т.п. В таком случае дочерний\n элемент может повлиять на родительский и изменить (к примеру, увеличить) его\n размеры. Вот `contain: size;` у родителя как раз и не даст этого сделать. <br>\n Ну а по существу, перевод есть перевод и, тем более, первый параграф сего\n ответа не является целью данной статьи, ибо так статьи излишне распухнет.\n <br>\n "
      ],
      "code": []
    },
    "question": "Объясните\n разницу между раскладкой (layout), painting и композитингом (compositing).",
    "difficulty": "junior",
    "description": ""
  },
  {
    "id": "uaQ1wnKNmH2huk3NBmUE",
    "difficulty": "junior",
    "question": "Что\n такое прогрессивная отрисовка?",
    "answer": {
      "text": [
        "Progressive\n Web App<br>\n Progressive Loading<br>\n Идея прогрессивной загрузки достаточно простая:<br>\n 1. Сделать первоначальную загрузку как можно быстрее<br>\n 2. Загружать UI компоненты только по мере надобности<br>\n "
      ],
      "link": [],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee46e"
    },
    "popularity": null,
    "type": "question",
    "description": "",
    "competence": [
      "javascript"
    ]
  },
  {
    "id": "ujN0ccZ1udAq6KExmBnP",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4c9"
    },
    "answer": {
      "text": [
        "Задачу\n можно решать различными способами. Обычно хотят узнать знает ли собеседуемый\n такой метод как reduce. <br>\n Идея заключается в том, чтобы обойти все элементы исходного массива и его\n “под массивов” с целью вернуть найденные значения в новый массив. Это\n происходит рекурсивно пока мы не дойдём до последнего элемента. <br>\n Так же с формированием нового массива нам помогает concat. <br>\n Ответ: <br>\n const flatten = (arr) =&gt; arr.reduce((flat, toFlatten) =&gt;\n flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten), []);\n <br>\n "
      ],
      "code": [],
      "link": []
    },
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "type": "question",
    "popularity": null,
    "description": "",
    "question": "Объедините\n два массива с вложенностью <br>\n [1, [1, 2, [3, 4]], [2, 4]] -&gt; [1, 1, 2, 3, 4, 2, 4] <br>\n "
  },
  {
    "id": "uyPJUX1bhqjxMsmh5bSn",
    "difficulty": "junior",
    "answer": {
      "text": [
        "Функция\n высшего порядка — это любая функция, которая принимает одну или несколько\n функций в качестве аргументов, которые она использует для работы с данными\n и/или возвращает функцию в качестве результата. Функции высшего порядка\n предназначены для абстрагирования некоторой операции, которая выполняется\n повторно. Классическим примером является метод map, который принимает массив\n и функцию в качестве аргументов. Затем `map` использует эту функцию для\n преобразования каждого элемента в массиве, возвращая новый массив с\n преобразованными данными. Другими популярными примерами в JavaScript являются\n forEach, filter и reduce. Функции высшего порядка используют не только для\n манипуляций с массивами, но также и для возврата функции из другой функции,\n например при использовании Function.prototype.bind. <br>\n Map <br>\n Допустим, у нас есть массив с именами, которые нам нужны о преобразовать в\n верхний регистр. <br>\n const names = ['irish', 'daisy', 'anna']; <br>\n Императивное решение будет выглядеть так: <br>\n const transformNamesToUppercase = function(names) { <br>\n const results = []; <br>\n for (let i = 0; i &lt; names.length; i++) { <br>\n results.push(names[i].toUpperCase()); <br>\n } <br>\n return results; <br>\n }; <br>\n transformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA'] <br>\n Воспользууемся .map(transformerFn), чтобы сделать код декларативным и более\n коротким: <br>\n const transformNamesToUppercase = function(names) { <br>\n return names.map(name =&gt; name.toUpperCase()); <br>\n }; <br>\n transformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']"
      ],
      "link": [
        "https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99",
        "https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a",
        "https://eloquentjavascript.net/05_higher_order.html"
      ],
      "code": []
    },
    "description": "",
    "competence": [
      "javascript"
    ],
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee45c"
    },
    "popularity": null,
    "question": "Дайте\n определение функции высшего порядка"
  },
  {
    "id": "uzmIdwJdlOPbOlOOdkMx",
    "question": "Почему\n считается хорошим тоном оставить глобальную область видимости (global scope)\n в нетронутом состоянии?",
    "description": "",
    "type": "question",
    "difficulty": "junior",
    "popularity": null,
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee44e"
    },
    "answer": {
      "code": [],
      "text": [
        "Каждый\n скрипт имеет доступ к глобальной области видимости, и если каждый будет\n использовать глобальное пространство имен для определения своих переменных,\n то могут возникнуть конфликты. Используйте модульный паттерн (используя IIFE)\n для инкапсуляции ваших переменных в локальное пространство имен."
      ],
      "link": []
    }
  },
  {
    "id": "vXBGoJn9ZWXGNFBl4eLt",
    "question": "web\n api",
    "description": "",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4d9"
    },
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "competence": [],
    "popularity": null,
    "type": null,
    "difficulty": null
  },
  {
    "id": "vgRmreDNrx2CU0YK5oyh",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "answer": {
      "code": [],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"
      ],
      "text": [
        "Шаблонные\n строки помогают упростить строковую строк или включение переменных в строку.\n До ES2015 писали так: <br>\n var person = { name: ‘Tyler’, age: 28 }; <br>\n console.log(‘Hi, my name is ‘ + person.name + ‘ and I am ‘ + person.age + ‘\n years old!’); <br>\n // ‘Hi, my name is Tyler and I am 28 years old!’ <br>\n С приходом шаблонных строк в ES6 стало намного проще: <br>\n const person = { name: ‘Tyler’, age: 28 }; <br>\n console.log(`Hi, my name is ${person.name} and I am ${person.age} years old!`);\n <br>\n // ‘Hi, my name is Tyler and I am 28 years old!’ <br>\n Обратите внимание, что для шаблонных строк используются обратные кавычки, а\n не простые. Переменные добавляются в подстановки ${}, обозначаемые знаком\n доллара и фигурными скобками. <br>\n Второй пример использования заключается в создании многострочных литералов.\n До ES2015 перенос осуществлялся следующим образом: <br>\n console.log(‘This is line one.\\nThis is line two.’); <br>\n // This is line one. <br>\n // This is line two. <br>\n Или же, чтобы не приходилось прокручивать длинную строку в текстовом\n редакторе, можно было разбить код на несколько строк в коде, таким образом:\n <br>\n console.log(‘This is line one.\\n’ + <br>\n ‘This is line two.’); <br>\n // This is line one. <br>\n // This is line two. <br>\n Однако шаблонные строки сохраняют любой интервал, который вы добавляете к\n ним. Например, чтобы создать тот же многострочный литерал, который мы создали\n выше, вы можете просто написать: <br>\n console.log(`This is line one. <br>\n This is line two.`); <br>\n // This is line one. <br>\n // This is line two. <br>\n Еще одним вариантом использования шаблонных строк будет использование в\n качестве замены библиотек шаблонизации для интерполяции переменных: <br>\n const person = { name: ‘Tyler’, age: 28 }; <br>\n document.body.innerHTML = ` <br>\n &lt;div&gt; <br>\n &lt;p&gt;Name: ${person.name}&lt;/p&gt; <br>\n &lt;p&gt;Name: ${person.age}&lt;/p&gt; <br>\n &lt;/div&gt; <br>\n ` <br>\n Обратите внимание, что ваш код может быть восприимчив к XSS при\n использовании .innerHTML. Очищайте ваши данные перед отображением, если они\n получены от пользователя!"
      ]
    },
    "type": "question",
    "question": "Шаблонные\n строки в ES6 намного упрощают создание строк, можете ли вы привести пример их\n использования?",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee45e"
    },
    "description": ""
  },
  {
    "id": "vmGgJKxGXBTA4p28yDdW",
    "_id": {
      "$oid": "60de0704e2c8c53194aee509"
    },
    "competence": [],
    "description": "",
    "answer": {
      "link": [],
      "text": [
        ""
      ],
      "code": []
    },
    "type": null,
    "popularity": null,
    "difficulty": null,
    "question": "\n <div style=\"left:3px;overflow:hidden;position:relative\">\n <div style=\"float:left\">D - Dependency inversion principle - decupling</div>\n </div>"
  },
  {
    "id": "w397bBevwzL3ISK59i2J",
    "popularity": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee488"
    },
    "description": "",
    "question": "Чему\n равно foo.x?",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "answer": {
      "code": [],
      "text": [
        "var\n foo = {n: 1};<br>\n var bar = foo;<br>\n foo.x = foo = {n: 2};<br>\n <br>\n Этот вопрос задают в топ 3% компаний (Apple, Google, Facebook). <br>\n Главное на что здесь стоит обратить внимание, так это то, что foo на\n которую ссылается foo.x “устанавливается” перед тем как foo изменится. foo.x\n ссылается на старое значение foo. <br>\n See section 11.13.1 of the ES5 spec: <br>\n Let lref be the result of evaluating LeftHandSideExpression. <br>\n Let rref be the result of evaluating AssignmentExpression. <br>\n Это значит, что в старом foo появиться новое свойство x равное {n: 2} . А в\n новое foo запишется {n: 2} . <br>\n Значение старого foo находиться в bar: <br>\n // bar <br>\n { <br>\n n: 1, <br>\n x: { <br>\n n: 2 <br>\n } <br>\n } <br>\n Так как при дальнейшем выводе foo.x наше foo ссылается на его новое\n значение, в котором отсутствует x , то соответственно foo.x будет не\n определенно — undefined . <br>\n Ответ: undefined <br>\n "
      ],
      "link": []
    }
  },
  {
    "id": "wI0QegcuFAkBUNDcUvfR",
    "description": "",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee438"
    },
    "competence": [
      "typescript"
    ],
    "popularity": "4",
    "question": "В\n каких случаях обычно используются анонимные функции?",
    "answer": {
      "link": [
        "https://www.quora.com/What-is-a-typical-usecase-for-anonymous-functions",
        "https://stackoverflow.com/questions/10273185/what-are-the-benefits-to-using-anonymous-functions-instead-of-named-functions-fo"
      ],
      "code": [],
      "text": [
        "Они\n могут использоваться в IIFE для инкапсуляции кода в локальную область\n видимости, чтобы объявленные в ней переменные не попадали в глобальную\n область видимости. <br>\n (function() { <br>\n // Здесь код функции. <br>\n })(); <br>\n Как callback-функция, которая используется один раз и не должна\n использоваться где-либо еще. Код будет казаться более автономным и читаемым,\n когда обработчики будут определены прямо внутри вызывающего их кода, а не\n искать в другом месте, чтобы найти тело функции. <br>\n setTimeout(function() { <br>\n console.log('Hello world!'); <br>\n }, 1000); <br>\n Аргументы в конструкциях функционального программирования или Lodash\n (аналогично callback-функциям). <br>\n const arr = [1, 2, 3]; <br>\n const double = arr.map(function(el) { <br>\n return el * 2; <br>\n }); <br>\n console.log(double); // [2, 4, 6]"
      ]
    },
    "difficulty": "junior"
  },
  {
    "id": "wTWYoGA5gd7tuYb1S2uw",
    "description": "",
    "difficulty": null,
    "type": null,
    "competence": [],
    "popularity": null,
    "question": "hoisting",
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4e0"
    }
  },
  {
    "id": "wpvVkIbBtQKNQINbPz3k",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4a4"
    },
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "var\n notation = '23+1-', notation1 = '7 2 3 * -', notation2 = '1 2 + 4 * 3 +';\n <br>\n function getComputation(notation) { <br>\n var queue = [], tmp, num1, num2; <br>\n for (var i = 0; i &lt; notation.length; i++) { <br>\n if (/\\d+/.test(notation[i]) === true) { <br>\n queue.push(Number(notation[i])); <br>\n } <br>\n else { <br>\n switch (notation[i]) { <br>\n case '+': <br>\n tmp = queue.pop() + queue.pop(); <br>\n queue.push(tmp); <br>\n break; <br>\n case '-': <br>\n num1 = queue.pop(); <br>\n num2 = queue.pop(); <br>\n if (num1 &gt; num2) { <br>\n tmp = num1 - num2; <br>\n } <br>\n else { <br>\n tmp = num2 - num1; <br>\n } <br>\n queue.push(tmp); <br>\n break; <br>\n case '*': <br>\n tmp = queue.pop() * queue.pop(); <br>\n queue.push(tmp); <br>\n break; <br>\n case '/': <br>\n tmp = queue.pop() / queue.pop(); <br>\n queue.push(tmp); <br>\n break; <br>\n } <br>\n } <br>\n } <br>\n return queue[0]; <br>\n } <br>\n console.log(getComputation(notation)); <br>\n console.log(getComputation(notation1)); <br>\n console.log(getComputation(notation2)); <br>\n "
      ]
    },
    "popularity": null,
    "type": "question",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "description": "",
    "question": "Обратная\n польская нотация."
  },
  {
    "id": "wwhoJqpXfCXSrmXqLUjp",
    "difficulty": "junior",
    "popularity": null,
    "description": "",
    "question": "Для\n чего используют событие `load`? Есть ли у этого события недостатки? Знаете ли\n вы какие-либо альтернативы, и в каких случаях бы стали их использовать?",
    "type": "question",
    "_id": {
      "$oid": "60de0704e2c8c53194aee44f"
    },
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "Событие\n load происходит в конце процесса загрузки документа. На этом этапе все\n объекты в документе находятся в DOM, и все изображения, скрипты и ссылки\n загрузились. <br>\n Событие DOM DOMContentLoaded будет запущено после создания DOM для\n страницы, но не будет ждать окончания загрузки других ресурсов. Оно\n предпочтительно в тех случаях, когда вам не нужно загружать страницу целиком\n перед инициализацией."
      ],
      "code": [],
      "link": [
        "https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload"
      ]
    }
  },
  {
    "id": "wwx5q46Ig1RIxavtUs7H",
    "type": "question",
    "competence": [
      "javascript"
    ],
    "question": "В каком порядке делать изменение размера колонок?",
    "description": "Типа как в экселе, когда хватаешь колонку и тащишь, а потом отпускаешь.",
    "popularity": "2",
    "difficulty": "junior",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "mousedown -> mouseMove -> mouseup -> click"
      ]
    }
  },
  {
    "id": "x3bSrFhwBy0yU9hVpqkE",
    "popularity": null,
    "competence": [],
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "description": "",
    "question": "generator\n object",
    "type": null,
    "difficulty": null,
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ef"
    }
  },
  {
    "id": "x6YwGOelyu23zeiVfbhh",
    "answer": {
      "code": [],
      "text": [
        "React\n и Redux: <br>\n React Devtools <br>\n Redux Devtools <br>\n Vue: <br>\n Vue Devtools <br>\n JavaScript: <br>\n Chrome Devtools <br>\n Выражение debugger <br>\n Отладка при помощи старого доброго console.log"
      ],
      "link": [
        "https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d",
        "https://raygun.com/blog/javascript-debugging/"
      ]
    },
    "description": "",
    "competence": [
      "javascript"
    ],
    "question": "Какие\n инструменты и методы вы используете при отладке кода?",
    "popularity": null,
    "type": "question",
    "difficulty": "junior",
    "_id": {
      "$oid": "60de0704e2c8c53194aee454"
    }
  },
  {
    "id": "xKPZWDUL5cOAcPqfShI3",
    "description": "",
    "type": null,
    "popularity": null,
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "difficulty": null,
    "question": "Контекст\n вызова, arrow function, bind",
    "_id": {
      "$oid": "60de0704e2c8c53194aee51f"
    },
    "competence": []
  },
  {
    "id": "xSAArRdURVBeGSbdtTRV",
    "popularity": null,
    "type": "question",
    "question": "Какие\n преимущества и недостатки у CSS и JavaScript анимаций?",
    "difficulty": "junior",
    "description": "",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee466"
    },
    "answer": {
      "link": [],
      "text": [
        "js\n юыстрее"
      ],
      "code": []
    }
  },
  {
    "id": "xfL3IpgRurqablKT0wic",
    "competence": [],
    "popularity": null,
    "answer": {
      "link": [],
      "code": [],
      "text": [
        ""
      ]
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee510"
    },
    "question": "Чем\n отличаются друг от друга унарные, бинарные и тернарные операторы",
    "difficulty": null,
    "type": null,
    "description": ""
  },
  {
    "id": "xjChUqmq086KpKpPC4Dk",
    "competence": [],
    "popularity": null,
    "answer": {
      "text": [
        ""
      ],
      "link": [],
      "code": []
    },
    "type": null,
    "question": "Promise",
    "_id": {
      "$oid": "60de0704e2c8c53194aee4f3"
    },
    "description": "",
    "difficulty": null
  },
  {
    "id": "xm6T9aDRQ8uJDsMCuwzz",
    "_id": {
      "$oid": "60de0704e2c8c53194aee472"
    },
    "type": "question",
    "competence": [
      "javascript"
    ],
    "description": "",
    "popularity": null,
    "difficulty": "junior",
    "question": "В\n чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и\n почему?",
    "answer": {
      "text": [
        "Цели\n normalize.css: <br>\n <br>\n сохранять полезные настройки браузера, а не стирать их; <br>\n нормализовать стили для широкого круга HTML-элементов; <br>\n корректировать ошибки и основные несоответствия браузера; <br>\n совершенствовать юзабилити незаметными улучшениями; <br>\n объяснять код, используя комментарии и детальную документацию. <br>\n "
      ],
      "link": [],
      "code": []
    }
  },
  {
    "id": "xrGpWjDUr6cAPosnBgL4",
    "question": "В\n чем разница между standards mode и quirks mode?",
    "description": "",
    "popularity": null,
    "difficulty": "junior",
    "answer": {
      "link": [],
      "text": [
        "На\n сегодняшний день существует три режима отображения, которые используются\n движками разметки (layout engines) браузеров: режим совместимости (quirks\n mode), частично стандартный режим (almost standards mode) и стандартный режим\n (full standards mode). В режиме совместимости (quirks mode), разметка\n эмулирует нестандартное поведение браузеров Navigator 4 и Internet Explorer\n 5. Этот режим необходим для поддержки сайтов, созданных до начала широкого\n применения веб стандартов. В стандартном режиме (full standards mode)\n поведение браузера соответствует (будем надеяться) описанному в спецификациях\n HTML и CSS. В частично стандартном режиме (almost standards mode) реализовано\n лишь незначительное количество так называемых \"странностей\"\n (quirks)."
      ],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee4ca"
    },
    "competence": [
      "javascript"
    ],
    "type": "question"
  },
  {
    "id": "yDtZGwF5hlBotdzVNMCi",
    "_id": {
      "$oid": "60de0704e2c8c53194aee50e"
    },
    "type": null,
    "description": "",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        ""
      ]
    },
    "question": "Какие\n есть falsy значения",
    "popularity": null,
    "competence": [],
    "difficulty": null
  },
  {
    "id": "yMSxGv2uOPnqhbGhzMQz",
    "description": "",
    "question": "Каким\n образом можно обмениваться кодом между файлами?",
    "_id": {
      "$oid": "60de0704e2c8c53194aee461"
    },
    "answer": {
      "text": [
        "Это\n зависит от среды выполнения JavaScript. <br>\n На клиенте (в среде браузера), пока переменные/функции объявлены в\n глобальной области видимости (window), все скрипты могут на них ссылаться. В\n качестве альтернативы, используйте Asynchronous Module Definition (AMD) через\n RequireJS для модульного подхода. <br>\n На сервере (Node.js) обычно используется CommonJS. Каждый файл считается\n модулем, и он может экспортировать переменные и функции, добавляя их к\n объекту module.exports. <br>\n ES2015 позволяет использовать модульный синтаксис, который призван заменить\n как AMD, так и CommonJS. В конечном итоге он будет поддерживаться как в\n браузере, так и в Node. <br>\n "
      ],
      "link": [
        "http://requirejs.org/docs/whyamd.html",
        "https://nodejs.org/docs/latest/api/modules.html",
        "http://2ality.com/2014/09/es6-modules-final.html"
      ],
      "code": []
    },
    "type": "question",
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "popularity": null
  },
  {
    "id": "yZSuh13seqyyTn4kMCFw",
    "competence": [
      "javascript"
    ],
    "answer": {
      "text": [
        "add(2,\n 5); // 7 <br>\n add(2)(5); // 7 <br>\n "
      ],
      "link": [],
      "code": []
    },
    "_id": {
      "$oid": "60de0704e2c8c53194aee483"
    },
    "description": "",
    "popularity": null,
    "difficulty": "junior",
    "question": "Как\n сделать, чтобы это выражение работало?",
    "type": "question"
  },
  {
    "id": "zAS6bg5r1ZXX9JRNYQnx",
    "difficulty": "junior",
    "competence": [
      "javascript"
    ],
    "_id": {
      "$oid": "60de0704e2c8c53194aee4cf"
    },
    "question": "армия\n функций",
    "answer": {
      "code": [],
      "link": [],
      "text": [
        "function\n makeArmy() { <br>\n let shooters = []; <br>\n for(let i = 0; i &lt; 10; i++) { <br>\n let shooter = function() { // функция shooter <br>\n alert( i ); // должна выводить порядковый номер <br>\n }; <br>\n shooters.push(shooter); <br>\n } <br>\n return shooters; <br>\n } <br>\n let army = makeArmy(); <br>\n "
      ]
    },
    "description": "Армию функцию мне запили",
    "popularity": "3",
    "tableIndex": 244,
    "type": "question"
  },
  {
    "id": "zLWnQ9XVxPgrtofXOiB4",
    "popularity": null,
    "difficulty": "junior",
    "type": "question",
    "answer": {
      "text": [
        "Разницу\n между Expires, Date, Age и If-Modified-… <br>\n Expires: Tue, 31 Jan 2012 15:02:53 GMT <br>\n Дата предполагаемого истечения срока актуальности сущности. <br>\n Date: Tue, 15 Nov 1994 08:12:31 GMT <br>\n Дата генерации отклика. <br>\n If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT <br>\n Дата. Выполнять метод если сущность изменилась с указанного момента. <br>\n Do Not Track <br>\n При включении этой опции браузеры будут посылать в http-заголовках запрос\n “Do Not Track” для того, чтобы ваши действия не отслеживались сайтом и\n третьими сторонами на нем (например, аналитическими и рекламными системами).\n <br>\n Cache-Control <br>\n Общий заголовок Cache-Control используется для задания инструкций\n кэширования как для запросов, так и для ответов. Инструкции кэширования\n однонаправленные: заданная инструкция в запросе не подразумевает, что такая\n же инструкция будет указана в ответе <br>\n Transfer-Encoding <br>\n механизм передачи данных в протоколе передачи гипертекста (HTTP),\n позволяющий надёжно доставлять данные от сервера клиенту (чаще всего\n клиентскому web-браузеру) без необходимости заранее знать точный размер всего\n тела HTTP-сообщения. Это достигается разбиением сообщения на небольшие части\n (chunks), а затем передачей каждой части с указанием только её размера (в\n шестнадцатеричном виде). Окончание передачи сообщения определяется наличием\n последней части с нулевой длиной. <br>\n Etag (или entity tag) — один из механизмов кэширования в HTTP. По сути это\n идентификатор, который присваивается файлу сервером для последующей проверки.\n <br>\n Когда клиент запрашивает файлы веб-страницы (картинки, CSS и т.д), сервер\n передает все данные вместе с тэгами Etag в виде: ETag:\n \"6d82cbb050ddc7fa9cbb659014546e59\" <br>\n Файлы сохраняются в кэше на стороне клиента, и когда браузер запрашивает\n эти файлы снова, то к запросу добавляется строка If-None-Match:\n If-None-Match: \"6d82cbb050ddc7fa9cbb659014546e59\" <br>\n Сервер, в свою очередь, проверяет Etag, если он совпадает, то в ответ\n сервер отправляет код 304:HTTP/1.1 304 Not Modified Иначе требуемые файлы\n будут заново отправлены. <br>\n X-Frame-Options <br>\n Заголовок X-Frame-Options со стороны сервера может разрешать или запрещать\n отображение страницы внутри фрейма. <br>\n Это должен быть именно HTTP-заголовок: браузер проигнорирует его, если\n найдёт в HTML-теге &lt;meta&gt;. Поэтому при &lt;meta\n http-equiv=\"X-Frame-Options\"...&gt; ничего не произойдёт. <br>\n Заголовок может иметь 3 значения: <br>\n DENY <br>\n Никогда не показывать страницу внутри фрейма. <br>\n SAMEORIGIN <br>\n Разрешить открытие страницы внутри фрейма только в том случае, если\n родительский документ имеет тот же источник. <br>\n ALLOW-FROM domain <br>\n Разрешить открытие страницы внутри фрейма только в том случае, если\n родительский документ находится на указанном в заголовке домене."
      ],
      "link": [],
      "code": []
    },
    "question": "Опишите\n следующие заголовки HTTP-запросов и ответов:",
    "_id": {
      "$oid": "60de0704e2c8c53194aee47f"
    },
    "competence": [
      "javascript"
    ],
    "description": ""
  },
  {
    "id": "zPyUWR6P5vjeh5wMcbow",
    "_id": {
      "$oid": "60de0704e2c8c53194aee48a"
    },
    "competence": [
      "javascript"
    ],
    "difficulty": "junior",
    "description": "",
    "popularity": null,
    "answer": {
      "text": [
        "Поскольку,\n мы работаем с числами, надо расширить прототип Number новыми методами. <br>\n Number.prototype.plus = function (value) { <br>\n return this + value; <br>\n } <br>\n <br>\n Number.prototype.minus = function (value) { <br>\n return this - value; <br>\n }"
      ],
      "code": [],
      "link": []
    },
    "question": "Реализовать\n методы, которые в процессе выполнения строки (2).plus(3).minus(1) дали бы на\n выходе 4.",
    "type": "question"
  },
  {
    "id": "zd23GzS3vLbxaEku2OEt",
    "answer": {
      "text": [
        "server side rendering"
      ],
      "link": [],
      "code": []
    },
    "popularity": "3",
    "question": "Что такое SSR?",
    "difficulty": "middle",
    "competence": [
      "javascript",
      "angular"
    ],
    "description": "Не СССР, а SSR",
    "type": "question"
  }
]
